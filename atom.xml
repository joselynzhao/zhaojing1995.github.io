<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>始终</title>
  
  <subtitle>不忘初心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liam.page/"/>
  <updated>2019-03-27T11:16:02.685Z</updated>
  <id>https://liam.page/</id>
  
  <author>
    <name>Liam Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 SumatraPDF 反向搜索时复用 VSCode 窗口</title>
    <link href="https://liam.page/2019/03/27/reuse-active-window-for-inverse-search-SumatraPDF-and-LaTeXworkshop-on-VSCode/"/>
    <id>https://liam.page/2019/03/27/reuse-active-window-for-inverse-search-SumatraPDF-and-LaTeXworkshop-on-VSCode/</id>
    <published>2019-03-27T08:03:41.000Z</published>
    <updated>2019-03-27T11:16:02.685Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇简单的记录。</p><p>最近升级 VSCode 之后发现 SumatraPDF 的反向搜索出了些问题。具体来说，反向搜索能够定位到 VSCode 里的代码位置，但是每次反向搜索都会打开新的 VSCode 窗口。烦不胜烦。</p><p>遂上网检索，找到 <a href="https://code.visualstudio.com/docs/editor/command-line" target="_blank" rel="noopener">VSCode 的命令行参数文档</a>。原来，默认情况下，使用命令行打开 VSCode 会打开新的窗口。为了重用上一个活动窗口，需要在命令行参数上加上 <code>-r</code> 或者完整版本 <code>--reuse-window</code>。</p><p>于是，LaTeXworkshop 的配置变成了这样：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">"latex-workshop.view.pdf.external.synctex": &#123;</span><br><span class="line">  "command": "C:\\Program Files (x86)\\SumatraPDF\\SumatraPDF.exe",</span><br><span class="line">  "args": [</span><br><span class="line">    "-forward-search",</span><br><span class="line">    "%TEX%",</span><br><span class="line">    "%LINE%",</span><br><span class="line">    "-reuse-instance",</span><br><span class="line">    "-inverse-search",</span><br><span class="line">    "\"C:\\Users\\huangchencheng\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\" \"C:\\Users\\huangchencheng\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\out\\cli.js\" -r -g \"%f:%l\"",</span><br><span class="line">    <span class="string">"%PDF%"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一篇简单的记录。&lt;/p&gt;
&lt;p&gt;最近升级 VSCode 之后发现 SumatraPDF 的反向搜索出了些问题。具体来说，反向搜索能够定位到 VSCode 里的代码位置，但是每次反向搜索都会打开新的 VSCode 窗口。烦不胜烦。&lt;/p&gt;
&lt;p&gt;遂上网检索，找到 &lt;a h
      
    
    </summary>
    
      <category term="LaTeX" scheme="https://liam.page/categories/LaTeX/"/>
    
    
      <category term="VSCode" scheme="https://liam.page/tags/VSCode/"/>
    
      <category term="SumatraPDF" scheme="https://liam.page/tags/SumatraPDF/"/>
    
      <category term="Inverse Search" scheme="https://liam.page/tags/Inverse-Search/"/>
    
  </entry>
  
  <entry>
    <title>谈谈因子分解机模型（FM）</title>
    <link href="https://liam.page/2019/03/25/Factorization-Machine/"/>
    <id>https://liam.page/2019/03/25/Factorization-Machine/</id>
    <published>2019-03-25T02:56:24.000Z</published>
    <updated>2019-03-27T11:14:57.165Z</updated>
    
    <content type="html"><![CDATA[<p>先前我们讨论过<a href="/2018/10/10/logistic-regression/">逻辑回归</a>。作为线性模型，它最大的优势是简单，于是可以以很高的效率去学习和预测，因而在很多领域都被广泛应用。但「成也萧何败萧何」，由于 LR 只能捕捉关于特征的线性信息，而无法捕捉非线性信息——特别是交叉特征信息，人们对 LR 进行了各种升级改造。</p><p>此篇介绍因子分解机模型（Factorization Machine）。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>首先我们介绍一下在实际工程中模型的使用背景。</p><h3 id="特征稀疏性"><a href="#特征稀疏性" class="headerlink" title="特征稀疏性"></a>特征稀疏性</h3><p>在诸如 CTR 预估、推荐或搜索 ranking 的场景中，特征是非常稀疏的。特征的稀疏性往往来自分类特征的 one-hot 编码。举例来说，我们有以下数据集。数据集中的「点击」是 label，而性别、地区、频道则是特征。</p><table><thead><tr><th>点击</th><th>性别</th><th>地区</th><th>频道</th></tr></thead><tbody><tr><td>1</td><td>男</td><td>天津</td><td>相声</td></tr><tr><td>0</td><td>女</td><td>甘肃</td><td>体育</td></tr><tr><td>1</td><td>女</td><td>云南</td><td>电视剧</td></tr></tbody></table><p>不难发现，在这个场景下，性别、地区、频道都是分类特征。其中性别有 2 个取值；地区按省级行政单位划分全中国有 30 余个取值；频道则可能更多，可能有上百个取值。由于类别特征的不同取址之间，在数值上是不可比较和不可计算的——例如我们没法说「天津与甘肃哪个更大」，或者去计算「云南 * 3 是多少」——因此我们通常会对这些分类特征进行 one-hot 编码。</p><table><thead><tr><th>点击</th><th>性别 = 男</th><th>性别 = 女</th><th>地区 = 天津</th><th>地区 = 甘肃</th><th>地区 = 云南</th><th>频道 = 相声</th><th>频道 = 体育</th><th>频道 = 电视剧</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>这里仅列出了 8 维特征。但实际上，如前所述，实际上由性别、地区、频道 one-hot 编码之后，特征维度会升高到 100+ 维。但对于每一条样本，这 100+ 维特征中，大多数的取值都是 0。具体来说，由于它们来自三个原始的分类特征，因此这 100+ 维特征中只有 3 维取值为 1，其余都是 0。</p><p>由此可见其稀疏性。</p><h3 id="交叉特征"><a href="#交叉特征" class="headerlink" title="交叉特征"></a>交叉特征</h3><p>用户是否会点击某个 item，往往与不同特征的组合高度相关。例如，地处天津的用户点击相声类 item 的概率可能显著高于全国用户的平均水平。因此，若一条样本的 <code>地区 = 天津</code> 和 <code>频道 = 相声</code> 同时出现，则其 CTR 应该相对较高。</p><p>对于这些特征，对产品形态和策略较熟悉的工程师，可以根据这些先验知识，进行人工的特征组合，作为新的组合特征交付给模型使用。使用 LR 作为 CTR 预估模型/ranking 模型时，往往会需要工程师进行大量的特征工程操作，以便提升模型的预测性能。</p><p>不过，当分类特征增多，特别是取值多的分类特征越来越多，进行人工特征交叉的工作量会越来越大。此外，全凭经验的特征工程，可能无法完全捕捉到特征中蕴含的规律，从而降低模型预测性能的天花板。这是这类做法的主要缺陷之一。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如此一来，我们就会希望设计一些模型，使得它们</p><ul><li>能够处理大规模的稀疏数据，并保有足够好的泛化性能（generalization performance）；</li><li>同时，我们还要求这些模型能够自动地学习到特征交叉带来的信息。</li></ul><h2 id="模型演进的背后"><a href="#模型演进的背后" class="headerlink" title="模型演进的背后"></a>模型演进的背后</h2><p>讲清楚了背景情况和总结了问题之后，我们就能分析模型演进背后的原理了。</p><h3 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h3><p>这里说的线性模型指的是线性回归和逻辑回归模型。假设模型的输入是特征向量 <code>$\vec x$</code>，则它们的预测函数分别是：</p><ul><li>线性回归：<code>$\hat y = f(\vec x) = w_0 + \sum_{i = 1}^{n}w_ix_i$</code>；</li><li>逻辑回归：<code>$\hat y = f(\vec x) = \sigma(\vec w\vec x) = \frac{1}{1 + \exp{\{w_0 + \sum_{i = 1}^{n}w_ix_i\}}}$</code>。</li></ul><p>线性模型的优势是简单可解释易扩展易并行。因此，逻辑回归模型是 CTR 预估领域早期最成功的模型。并且时至今日，仍有工业级的系统仍然采用逻辑回归模型。</p><p>不过，如前所述，由于线性模型无法捕获交叉特征带来的信息，因此其预测效果依赖大量的人工特征工程。随着特征量和样本量的增加，人工特征工程的成本越来越高，考虑让模型自动学习特征组合是必然的模型演进方向。</p><h3 id="二阶多项式核-SVM"><a href="#二阶多项式核-SVM" class="headerlink" title="二阶多项式核 SVM"></a>二阶多项式核 SVM</h3><p>既然单纯的线性模型无法捕获交叉特征。那么，最简单直接的做法就是为两两的特征组合分配一个权重参数。这些新的权重参数和原始特征对应的参数一样，交给模型去在训练阶段学习。如此一来就形成了如下的预测函数：</p><p><code>$$\hat y = f(\vec x) = w_0 + \sum_{i = 1}^{n}w_ix_i + \sum_{0 &lt; i &lt; j &lt;= n}w_{i, j}x_ix_j.$$</code></p><blockquote><p>这实际上就是核函数选择为二阶多项式核的 SVM 模型。</p></blockquote><p>这样设计的模型看起来能够学习到特征两两交叉带来的信息了。但这只是理论上的改进，别忘了我们从工程背景中抽象出来的问题中的第一条要求：</p><ul><li>能够处理大规模的稀疏数据，并保有足够好的泛化性能（generalization performance）。</li></ul><p>由于 <code>$w_{i, j}$</code> 的取值<strong>完全取决于 <code>$x_i$</code> 和 <code>$x_j$</code> 的乘积</strong>，在数据稀疏的场景下，可能存在训练集中 <code>$x_ix_j$</code> 始终为零的情况。这样一来，模型就无法有效地更新权重 <code>$w_{i, j}$</code> 了；更进一步，在预测阶段，模型遇到 <code>$x_ix_j$</code> 不为零的情况可能就很难有效地泛化。</p><h3 id="因子分解机模型"><a href="#因子分解机模型" class="headerlink" title="因子分解机模型"></a>因子分解机模型</h3><p>既然二阶多项式核 SVM 泛化性能不足的原因是「<code>$w_{i, j}$</code> 的取值<strong>完全取决于 <code>$x_i$</code> 和 <code>$x_j$</code> 的乘积</strong>」，那么最直接的办法就是突破这一限制了。</p><p>FM 模型的解决办法是为每个维度的特征（<code>$x_i$</code>）学习一个表征向量（<code>$v_i$</code>，其实可以理解为是特征 ID 的 embedding 向量）。而后将 <code>$x_i$</code> 和 <code>$x_j$</code> 的乘积的权重设定为各自表征向量的点积。也就是有如下形式的预测函数：</p><p><code>$$\hat y = f(\vec x) = w_0 + \sum_{i = 1}^{n}w_ix_i + \sum_{0 &lt; i &lt; j &lt;= n}\langle \vec v_i, \vec v_j\rangle x_ix_j.$$</code></p><p>显然，FM 模型也具有二阶多项式核 SVM 的优点：能够学习到特征两两交叉带来的信息。那么现在的问题是，为什么相对二阶多项式核 SVM 做出的改进能够提高模型的泛化性能？</p><p>如果你熟悉现在深度学习中各种对 item 的 embedding 操作，那么这个问题就不难理解了。FM 模型的表征向量相比深度学习中各种 embedding 其实是一回事——只是少了若干层 MLP，而是直接对交叉特征的组合进行建模。</p><p>我们回到上一小节举的例子：训练集中 <code>$x_ix_j$</code> 始终为零。在二阶多项式核 SVM 中，由于参数权重 <code>$w_{i, j}$</code> 得不到更新，模型无法学到 <code>$x_i$</code> 和 <code>$x_j$</code> 交叉带来的信息。但是在 FM 中，<code>$x_i$</code> 和 <code>$x_j$</code> 的参数并不完全由 <code>$x_i$</code> 和 <code>$x_j$</code> 的乘积决定。具体来说，每一维特征的表征向量由该维特征与其它所有维度特征的交叉共同决定。于是，只要存在某个 <code>$k$</code> 使得 <code>$x_i$</code> 和 <code>$x_k$</code> 的乘积不总是为零，那么第 <code>$i$</code> 维特征的表征向量 <code>$\vec v_i$</code> 就能够学到有效的信息——同理对 <code>$\vec v_j$</code> 也有同样的结论。于是乎，哪怕在训练集中，<code>$x_ix_j$</code> 始终为零，其参数 <code>$\langle \vec v_i, \vec v_j\rangle$</code> 也是经过了学习更新的，因此能够表现出很好的泛化性能。</p><p>也许有人会说，如果不存在这样的 <code>$k$</code> 使得 <code>$x_i$</code> 和 <code>$x_k$</code> 的乘积不总是为零，会怎么样呢？好吧，这就意味着这一维特征的取值永远是零——那它还有什么意义？从特征列表中删掉它就好啦！</p><h2 id="效率问题"><a href="#效率问题" class="headerlink" title="效率问题"></a>效率问题</h2><p>在文章开篇，我们提到「LR 可以以很高的效率去学习和预测，因而在很多领域都被广泛应用」。那么 FM 模型如何呢？如果 FM 模型训练和预测都死慢死慢地，那么工程师迭代模型的效率会非常低，上线后 serving 的开销也会很大。这样一来，等待 FM 模型的最终结果必然是被抛弃……</p><p>考虑到 FM 模型会对特征进行二阶组合，在有 $n$ 个原始特征时，交叉特征就会有 <code>$\frac{n ^ 2 - n}{2}$</code> 个。因此，如果不做任何优化，FM 模型的复杂度会是 <code>$O(n^2)$</code>，具体来说是 <code>$O(kn^2)$</code>（其中 <code>$k$</code> 是表征向量的长度）。在特征规模非常大的场景中，这是不可接受的。</p><p>那么问题来了，是否有办法将复杂度降低到 <code>$O(kn)$</code> 呢？答案是可以的，我们来看针对特征交叉项的一系列变换。</p><p><code>$$\begin{aligned}\sum_{0 &lt; i &lt; j &lt;= n}\langle \vec v_i, \vec v_j\rangle x_ix_j    &amp;{} = \sum_{i = 1}^{n - 1}\sum_{j = i + 1}^{n} \langle \vec v_i, \vec v_j\rangle x_ix_j \\    &amp;{} = \frac{1}{2}\sum_{i = 1}^{n}\sum_{j = 1}^{n}\langle \vec v_i, \vec v_j\rangle x_ix_j - \frac{1}{2}\sum_{i = 1}^{n}\langle \vec v_i, \vec v_i\rangle x_ix_i \\    &amp;{} = \frac{1}{2}\biggl(\sum_{i = 1}^{n}\sum_{j = 1}^{n}\sum_{d = 1}^{k}\vec v_{i, d}\vec v_{j, d}x_ix_j - \sum_{i = 1}^{n}\sum_{d = 1}^{k}\vec v_{i, d}^2x_i^2\biggr) \\    &amp;{} = \frac{1}{2}\sum_{d = 1}^{k}\biggl(\sum_{i = 1}^{n}\sum_{j = 1}^{n}\vec v_{i, d}\vec v_{j, d}x_ix_j - \sum_{i = 1}^{n}\vec v_{i, d}^2x_i^2\biggr) \\    &amp;{} = \frac{1}{2}\sum_{d = 1}^{k}\biggl(\Bigl(\sum_{i = 1}^{n}\vec v_{i, d}x_i\Bigr)\Bigl(\sum_{j = 1}^{n}\vec v_{j, d}x_j\Bigr) - \sum_{i = 1}^{n}\vec v_{i, d}^2x_i^2\biggr) \\    &amp;{} = \frac{1}{2}\sum_{d = 1}^{k}\biggl(\Bigl(\sum_{i = 1}^{n}\vec v_{i, d}x_i\Bigr)^2 - \sum_{i = 1}^{n}\vec v_{i, d}^2x_i^2\biggr).\end{aligned}$$</code></p><p>等式第一行是一个平凡的变换，很容易理解。</p><p>等式第二行修改了求和符号的范围。原本的求和符号中有 <code>$\frac{n ^ 2 - n}{2}$</code> 项；变换之后第一项中的求和符号有 <code>$n^2$</code> 项，第二项中的求和符号有 <code>$n$</code> 项。因此两式恰好相等。</p><p>等式第三行是对向量内积的展开，很容易理解。</p><p>等式第四行是运用了加法的结合律，将 <code>$\sum_{d = 1}^{k}$</code> 抽到外面，这步容易理解。</p><p>等式第五行是连续两次逆向使用了乘法对加法的分配率（提取公因子），这一步可能稍微难理解一些。简便起见，我们将 <code>$\vec v_{i, d}x_i$</code> 记作 <code>$a_i$</code>；将 <code>$\vec v_{j, d}x_j$</code> 记作 <code>$a_j$</code>。则变换前的公式记作 <code>$\sum_{i = 1}^{n}\sum_{j = 1}^{n}a_ia_j$</code>。将它展开是：</p><p><code>$$\begin{aligned}\sum_{i = 1}^{n}\sum_{j = 1}^{n}a_ia_j   = {}&amp; a_1a_1 + a_1a_2 + \cdots + a_1a_n + \\     {}&amp; a_2a_1 + a_2a_2 + \cdots + a_2a_n + \\     {}&amp; \cdots + \\     {}&amp; a_na_1 + a_na_2 + \cdots + a_na_n \\   = {}&amp; a_1\bigl(a_1 + a_2 + \cdots + a_n\bigr) + \\     {}&amp; a_2\bigl(a_1 + a_2 + \cdots + a_n\bigr) + \\     {}&amp; \cdots + \\     {}&amp; a_n\bigl(a_1 + a_2 + \cdots + a_n\bigr) \\   = {}&amp; a_1\Bigl(\sum_{j = 1}^{n}a_j\Bigr) + a_2\Bigl(\sum_{j = 1}^{n}a_j\Bigr) + \cdots + a_n\Bigl(\sum_{j = 1}^{n}a_j\Bigr) \\   = {}&amp; \sum_{i = 1}^{n}a_i\sum_{j = 1}^{n}a_j \\   = {}&amp; \Bigl(\sum_{i = 1}^{n}\vec v_{i, d}x_i\Bigr)\Bigl(\sum_{j = 1}^{n}\vec v_{j, d}x_j\Bigr).\end{aligned}$$</code></p><p>等式第六行也很明显。第五行的结果中的两个求和项仅仅是下标不同，实际上完全是一回事，因此直接平方就好了。</p><p>如此一来，FM 的预测公式变成了下面这样</p><p><code>$$\begin{aligned}\hat y  &amp;{} = f(\vec x) \\  &amp;{} = w_0 + \sum_{i = 1}^{n}w_ix_i + \frac{1}{2}\sum_{d = 1}^{k}\biggl(\Bigl(\sum_{i = 1}^{n}\vec v_{i, d}x_i\Bigr)^2 - \sum_{i = 1}^{n}\vec v_{i, d}^2x_i^2\biggr).\end{aligned}$$</code></p><p>显然，它的复杂度是 <code>$O(kn)$</code>。考虑到特征的稀疏性，尽管 <code>$n$</code> 可能很大，但很多 <code>$x_i$</code> 都是零。因此其实际复杂度应该是 <code>$O(k\bar n)$</code>——其中 <code>$\bar n$</code> 表示样本不为零的特征维度数量的平均值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下。FM 模型不仅在模型本身能够满足下列两个特性，还保证了训练和预测的效率为 <code>$O(k\bar n)$</code>，因而是非常优秀的模型、被广泛运用：</p><ul><li>能够处理大规模的稀疏数据，并保有足够好的泛化性能（generalization performance）；</li><li>同时，能够自动地学习到特征交叉带来的信息。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先前我们讨论过&lt;a href=&quot;/2018/10/10/logistic-regression/&quot;&gt;逻辑回归&lt;/a&gt;。作为线性模型，它最大的优势是简单，于是可以以很高的效率去学习和预测，因而在很多领域都被广泛应用。但「成也萧何败萧何」，由于 LR 只能捕捉关于特征的线性信息，而无法捕捉非线性信息——特别是交叉特征信息，人们对 LR 进行了各种升级改造。&lt;/p&gt;
&lt;p&gt;此篇介绍因子分解机模型（Factorization Machine）。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm and Computer Science" scheme="https://liam.page/categories/Algorithm-and-Computer-Science/"/>
    
    
      <category term="Ranking" scheme="https://liam.page/tags/Ranking/"/>
    
      <category term="Logistic Regression" scheme="https://liam.page/tags/Logistic-Regression/"/>
    
      <category term="Factorization Machine" scheme="https://liam.page/tags/Factorization-Machine/"/>
    
      <category term="SVM" scheme="https://liam.page/tags/SVM/"/>
    
      <category term="CTR" scheme="https://liam.page/tags/CTR/"/>
    
  </entry>
  
  <entry>
    <title>于 CentOS 7 上编译安装 Python 3.7.2</title>
    <link href="https://liam.page/2019/03/19/compile-and-install-Python-3-7-2-on-CentOS-7/"/>
    <id>https://liam.page/2019/03/19/compile-and-install-Python-3-7-2-on-CentOS-7/</id>
    <published>2019-03-19T08:59:02.000Z</published>
    <updated>2019-03-19T09:16:12.347Z</updated>
    
    <content type="html"><![CDATA[<p>又到了愉悦地配置系统的时间……今日的任务是在 CentOS 7 上安装最新版本的 Python 3.7.2。</p><p>由于前些日子，蛤力橙表示 Anaconda 是 some what 邪恶的，所以这次不打算偷懒用 Anaconda 了，而是选择从源码编译安装。这里记录一些踩过的坑。</p><a id="more"></a><h2 id="安装完成后-yum-等脚本挂掉"><a href="#安装完成后-yum-等脚本挂掉" class="headerlink" title="安装完成后 yum 等脚本挂掉"></a>安装完成后 <code>yum</code> 等脚本挂掉</h2><p>原因：<code>yum</code> 等脚本依赖 Python2 而非 Python3。这次跨大版本升级，会破坏 <code>yum</code> 等脚本 shebang 头部的指令。</p><p>解决办法：使 <code>yum</code> 等脚本显式依赖 Python2。</p><p>具体：修改 <code>/usr/bin</code> 下 <code>yum</code> 相关脚本的 shebang 头，将 <code>python</code> 修改为 <code>python2</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/bin</span><br><span class="line">$ ls -al yum*</span><br><span class="line">-rwxr-xr-x. 1 root root   801 11月 15 2016 yum</span><br><span class="line">-rwxr-xr-x. 1 root root  9429 11月  6 2016 yum-builddep</span><br><span class="line">-rwxr-xr-x. 1 root root  8582 11月  6 2016 yum-config-manager</span><br><span class="line">-rwxr-xr-x. 1 root root  7609 11月  6 2016 yum-debug-dump</span><br><span class="line">-rwxr-xr-x. 1 root root  7903 11月  6 2016 yum-debug-restore</span><br><span class="line">-rwxr-xr-x. 1 root root 10999 11月  6 2016 yumdownloader</span><br><span class="line">-rwxr-xr-x. 1 root root 11031 11月  6 2016 yum-groups-manager</span><br></pre></td></tr></table></figure><h2 id="安装过程中缺胳膊少腿"><a href="#安装过程中缺胳膊少腿" class="headerlink" title="安装过程中缺胳膊少腿"></a>安装过程中缺胳膊少腿</h2><p>原因：Python 依赖其他第三方库，而这些库在系统内没有安装，或者安装的位置不在 Python 安装脚本默认搜索的范围内。</p><p>解决办法：使用 <code>yum</code> 一口气安装就好了。</p><p>具体：执行下列 <code>yum</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y ncurses-libs zlib-devel mysql-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><h2 id="安装完成后-pip-提示没有可用的-SSL，以至于无法访问-https-协议的源"><a href="#安装完成后-pip-提示没有可用的-SSL，以至于无法访问-https-协议的源" class="headerlink" title="安装完成后 pip 提示没有可用的 SSL，以至于无法访问 https 协议的源"></a>安装完成后 <code>pip</code> 提示没有可用的 SSL，以至于无法访问 <code>https</code> 协议的源</h2><p>原因：Python 编译时没有将 SSL 编译进去。</p><p>解决办法：安装符合要求的 OpenSSL 版本，并在 <code>./configure</code> 时添加 <code>--with-ssl</code> 参数。</p><p>具体：执行下列命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /path/to/downloads</span><br><span class="line">$ wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1b.tar.gz</span><br><span class="line">$ tar zvxf openssl-1.1.1b.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> openssl-1.1.1b</span><br><span class="line">$ ./config -fPIC --prefix=/usr/ --openssldir=/usr/openssl <span class="built_in">enable</span>-shared shared zlib</span><br><span class="line">$ make -j24</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><blockquote><p>注意：必须安装 1.0.2 以上版本的 OpenSSL，故而 <code>yum</code> 源当中的 1.0.1 版本不可用。</p></blockquote><h2 id="依赖-SSL-之后提示-UUID-编译失败"><a href="#依赖-SSL-之后提示-UUID-编译失败" class="headerlink" title="依赖 SSL 之后提示 UUID 编译失败"></a>依赖 SSL 之后提示 UUID 编译失败</h2><p>原因：Python 的 UUID 相关扩展的代码有 bug；无法正确载入 <code>uuid.h</code> 头文件或者载入了两个版本的头文件。</p><p>解决办法：修改相应头文件。</p><p>具体：在 Python 源码根目录，编辑 <code>./Modules/_uuidmodule.c</code> 文件，修改头部 <code>#include</code> 部分的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PY_SSIZE_T_CLEAN</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Python.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_UUID_UUID_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;uuid/uuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;uuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下编译安装 Python 3.7.2 时用到的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ncurses-libs zlib-devel mysql-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel uuid-devel libuuid-devel</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /path/to/downloads</span><br><span class="line">wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1b.tar.gz</span><br><span class="line">tar zvxf openssl-1.1.1b.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssl-1.1.1b</span><br><span class="line">./config -fPIC --prefix=/usr/ --openssldir=/usr/openssl <span class="built_in">enable</span>-shared shared zlib</span><br><span class="line">make -j24</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /path/to/downloads</span><br><span class="line">wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz</span><br><span class="line">tar zvxf Python-3.7.2.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.7.2</span><br><span class="line">sed -i <span class="string">"6s/endif/else/"</span> ./Modules/_uuidmodule.c</span><br><span class="line">sed -i <span class="string">"7d"</span> ./Modules/_uuidmodule.c</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3.7.2 --<span class="built_in">enable</span>-optimizations --<span class="built_in">enable</span>-shared --<span class="built_in">enable</span>-profiling --with-ssl</span><br><span class="line">make -j24</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> $(ls /usr/<span class="built_in">local</span>/python3.7.2/bin/); <span class="keyword">do</span> ln -sf /usr/<span class="built_in">local</span>/python3.7.2/bin/<span class="variable">$&#123;fname&#125;</span> ./<span class="variable">$&#123;fname&#125;</span>; <span class="keyword">done</span></span><br><span class="line">ln -sf pydoc3 pydoc</span><br><span class="line">ln -sf python3 python</span><br><span class="line">ln -sf python3-config python-config</span><br><span class="line">ln -sf pip3 pip</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到了愉悦地配置系统的时间……今日的任务是在 CentOS 7 上安装最新版本的 Python 3.7.2。&lt;/p&gt;
&lt;p&gt;由于前些日子，蛤力橙表示 Anaconda 是 some what 邪恶的，所以这次不打算偷懒用 Anaconda 了，而是选择从源码编译安装。这里记录一些踩过的坑。&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Skills" scheme="https://liam.page/categories/Computer-Skills/"/>
    
    
      <category term="Python" scheme="https://liam.page/tags/Python/"/>
    
      <category term="OpenSSL" scheme="https://liam.page/tags/OpenSSL/"/>
    
      <category term="UUID" scheme="https://liam.page/tags/UUID/"/>
    
      <category term="yum" scheme="https://liam.page/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>到底什么是「内容与样式分离」</title>
    <link href="https://liam.page/2019/03/18/separation-of-content-and-presentation/"/>
    <id>https://liam.page/2019/03/18/separation-of-content-and-presentation/</id>
    <published>2019-03-18T06:18:21.000Z</published>
    <updated>2019-03-19T01:24:36.048Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章的原因有两个。</p><ol><li>时至今日仍然有很多人在按「这一行要缩进两个字符、加粗」的方式来使用 LaTeX；</li><li>市面上关于 LaTeX 的资料大都宣称「LaTeX 是内容与样式分离的」，却不对此做进一步解释，含混而过。</li></ol><p>我认为有必要对此稍作解释（或者是重新解释），形成一篇短文，填上这一空白。</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>内容与样式分离在英文环境中，更多地被称作：内容与表现分离（separation of content and presentation）。这里的「表现」指的是内容呈现出来的状态，即英文：「the state of being presented」。这一原则的本意是一篇文档的实际内容和逻辑结构与这篇文档呈现给读者看到的样式是相互独立的。举个栗子。<code>em</code> 是 <code>emphasis</code> 的缩写。于是 HTML 语法中的 <code>&lt;em&gt;</code> 标签和 LaTeX 语法中的 <code>\emph{}</code> 命令，都是用来强调文档中的一部分内容使用的。通常，被强调的内容的样式是「倾斜体」。但请注意，「被强调的内容」与「倾斜体」之间的关系，既不充分也不必要。这也就是说，被强调的内容既可以是倾斜体，也可以不是倾斜体——例如可以用增加下划线或者用更高的字重（即用粗体）；另一方面，倾斜体也不一定是被强调的内容——排版诗歌时，一般就会用到倾斜体。</p><blockquote><p>由此也可见得，「内容与样式分离」这一原则并非只属于 LaTeX。它是一种通用的原则，并非 LaTeX 家专属。</p></blockquote><h2 id="思维流"><a href="#思维流" class="headerlink" title="思维流"></a>思维流</h2><p>基于这些对「内容与样式分离」的理解，我们可以看看在内容与样式分离这一原则之下，写作时的思维流应该是怎样的。思维流是我自创的概念；在我的理解中</p><p>$$ \text{思维流} = \text{思考方式} + \text{思考的内容}. $$</p><p>这里我们以下面的内容为例，看一看思维流是怎样的。</p><blockquote><p><strong>定理 1 (勾股定理).</strong> <em>设直角三角形的三条边长分别是 $a$, $b$ 和 $c$，其中 $c$ 是斜边边长，则有 $a^2 + b^2 = c^2$ 成立.</em></p></blockquote><h3 id="内容与样式不分离"><a href="#内容与样式不分离" class="headerlink" title="内容与样式不分离"></a>内容与样式不分离</h3><p>对于内容与样式不分离的思维流，书写这段文字的时候大概是这样的：</p><ul><li>加粗</li><li><code>定理</code></li><li><code>空格</code></li><li>数字 <code>1</code></li><li>左括号 <code>(</code></li><li><code>勾股定理</code></li><li>右括号 <code>)</code></li><li>句点 <code>.</code></li><li>空格 <code></code></li><li>结束加粗</li><li>倾斜体</li><li><code>设直角三角形的三条边长分别是 $a$, $b$ 和 $c$，其中 $c$ 是斜边边长，则有 $a^2 + b^2 = c^2$ 成立.</code></li><li>结束倾斜</li></ul><p>翻译成 LaTeX 代码大概会是这样：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">textbf</span><span class="string">&#123;定理 1 (勾股定理).&#125;</span></span> <span class="tag">\<span class="name">textsl</span><span class="string">&#123;设直角三角形的三条边长分别是 $a$, $b$ 和 $c$，其中 $c$ 是斜边边长，则有 $a^2 + b^2 = c^2$ 成立.&#125;</span></span></span><br></pre></td></tr></table></figure><p><strong>不遵守内容与样式分离的原则时，作者的思维是非结构化的。作者思考的是「这一小块内容应该是加粗还是倾斜，是多大字号」这些问题。然后，作者在书写内容时，不得不边写边调整格式。</strong></p><h3 id="内容与样式分离"><a href="#内容与样式分离" class="headerlink" title="内容与样式分离"></a>内容与样式分离</h3><p>对于内容与样式分离的思维流，书写这段文字的时候大概是这样：</p><ul><li>这是一个 <code>定理</code></li><li>它的编号是 <code>1</code></li><li>它的名字是 <code>勾股定理</code></li><li>它的内容是 <code>设直角三角形的三条边长分别是 $a$, $b$ 和 $c$，其中 $c$ 是斜边边长，则有 $a^2 + b^2 = c^2$ 成立.</code></li><li>把它们分别放在恰当的标记中（在 LaTeX 中是定理环境）</li></ul><p>翻译成 LaTeX 代码大概会是这样：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;theorem&#125;</span><span class="string">[勾股定理]</span></span></span><br><span class="line">设直角三角形的三条边长分别是 <span class="formula">$a$</span>, <span class="formula">$b$</span> 和 <span class="formula">$c$</span>，其中 <span class="formula">$c$</span> 是斜边边长，则有 <span class="formula">$a^2 + b^2 = c^2$</span> 成立.</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;theorem&#125;</span></span></span><br></pre></td></tr></table></figure><p><strong>在内容与样式分离的原则下，作者的思维流是结构化的。具体来说，作者会思考：「这一小块内容起到了什么作用，属于什么结构」，然后相应地标记（在 LaTeX 中是命令或者控制序列）这些内容。例如，在这个例子中，作者用 <code>theorem</code> 环境把定理的各个方面标记起来。这种情况下，作者无需边写边调整格式，只需在撰写文档开始前或者结束后，统一定义各个标记的具体样式即可。</strong></p><h2 id="一个问答"><a href="#一个问答" class="headerlink" title="一个问答"></a>一个问答</h2><p>很多人使用 LaTeX 时往往会有这种疑惑：不是说 LaTeX 是内容与样式分离的吗？为什么为用 LaTeX 写文章的时候，还要不停去调整格式？</p><p>对此，我的回答如下：</p><ol><li>LaTeX 是按照「内容与样式分离」的原则设计的没错，但是具体能不能遵循这一原则，还要看具体使用的人。事实上，从 Office 2003 开始，Microsoft Word 也引入了样式的功能，可以在这一原则下写作。这一点与 LaTeX 是一样的。但是有多少人会「正确地使用 Word」呢？</li><li>如果写作的过程中会需要你不停调整格式，说明你没有完全遵循内容与样式分离的思维流。你需要做的事情是切换思维流：<ul><li>遇到一段内容，比如 <code>foo bar baz</code>，你打算将其加粗并将字体放大。比如使用 <code>\textbf{\LARGE foo bar baz}</code>；</li><li>你需要做的是停下，然后去思考这一段内容究竟起到什么作用？属于什么结构？比如，你发现它是练习题的名字，接下来还会有练习题的内容。</li><li>那么你需要在导言区定义一个命令或者环境，用于标记练习题。比如定义一个带有一个参数的环境 <code>MyExercise</code>。此时你可以不去设计这个环境的具体格式，只需要有一个框架即可。</li><li>然后，你应该在恰当的位置使用该环境。</li><li>最后，当你文章写完之后，如果还有尚未确定样式的命令或环境，再去慢慢设计就好了。</li></ul></li></ol><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% ...</span></span><br><span class="line"><span class="tag">\<span class="name">newenvironment</span><span class="string">&#123;MyExercise&#125;</span><span class="string">[1]</span><span class="string">&#123;#1\par&#125;</span><span class="string">&#123;\par&#125;</span></span></span><br><span class="line"><span class="comment">% ...</span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line"><span class="comment">% ...</span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;MyExercise&#125;</span><span class="string">&#123;foo bar baz&#125;</span></span></span><br><span class="line"><span class="comment">% ...</span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;MyExercise&#125;</span></span></span><br><span class="line"><span class="comment">% ...</span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写这篇文章的原因有两个。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时至今日仍然有很多人在按「这一行要缩进两个字符、加粗」的方式来使用 LaTeX；&lt;/li&gt;
&lt;li&gt;市面上关于 LaTeX 的资料大都宣称「LaTeX 是内容与样式分离的」，却不对此做进一步解释，含混而过。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我认为有必要对此稍作解释（或者是重新解释），形成一篇短文，填上这一空白。&lt;/p&gt;
    
    </summary>
    
      <category term="LaTeX" scheme="https://liam.page/categories/LaTeX/"/>
    
    
      <category term="Content" scheme="https://liam.page/tags/Content/"/>
    
      <category term="Presentation" scheme="https://liam.page/tags/Presentation/"/>
    
      <category term="Style" scheme="https://liam.page/tags/Style/"/>
    
  </entry>
  
  <entry>
    <title>在 Tmux 创建 window 或 pane 之后执行命令</title>
    <link href="https://liam.page/2019/03/07/execute-command-after-create-new-window-or-pane-in-Tmux/"/>
    <id>https://liam.page/2019/03/07/execute-command-after-create-new-window-or-pane-in-Tmux/</id>
    <published>2019-03-07T07:19:32.000Z</published>
    <updated>2019-03-07T07:28:34.296Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇简单的记录。</p></blockquote><p>最近在服务器上安装 Tmux，但每次新建 window 或 pane 之后，不会加载 <code>.bashrc</code> 中的内容。这大概与机器上默认的 login shell 的配置有关。一瞬间，脑海里想到的有两种解法。</p><ul><li>修改 Tmux 默认启动的 shell；</li><li>在 Tmux 创建 window 或 pane 之后执行命令，<code>source ~/.bashrc</code>。</li></ul><a id="more"></a><p>前一种解法不难，但只有这单一的用处。修改 <code>~/.tmux.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>-option -g default-shell <span class="string">"/bin/bash"</span></span><br></pre></td></tr></table></figure><p>后一种解法就灵活多了。具体就是在 <code>split-window</code> 或者 <code>new-window</code> 之后向 shell 发送命令。修改 <code>~/.tmux.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> c new-window \; send-keys <span class="string">"source ~/.bashrc; clear"</span> Enter</span><br><span class="line"><span class="built_in">bind</span> - splitw -v \; send-keys <span class="string">"source ~/.bashrc; clear"</span> Enter</span><br><span class="line"><span class="built_in">bind</span> | splitw -h \; send-keys <span class="string">"source ~/.bashrc; clear"</span> Enter</span><br></pre></td></tr></table></figure><p>此处我将 <code>prefix + c</code> 绑定为产生新 window 的快捷键，而后向 shell 发送 <code>source ~/.bashrc; clear</code> 的命令并回车。<code>prefix + -</code> 和 <code>prefox + |</code> 则分别被设置为纵向和横向分割 window 产生新的 pane，同样会发送相关命令到 shell。如此一来，前述问题就解决了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是一篇简单的记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在服务器上安装 Tmux，但每次新建 window 或 pane 之后，不会加载 &lt;code&gt;.bashrc&lt;/code&gt; 中的内容。这大概与机器上默认的 login shell 的配置有关。一瞬间，脑海里想到的有两种解法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改 Tmux 默认启动的 shell；&lt;/li&gt;
&lt;li&gt;在 Tmux 创建 window 或 pane 之后执行命令，&lt;code&gt;source ~/.bashrc&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Computer Skills" scheme="https://liam.page/categories/Computer-Skills/"/>
    
    
      <category term="Tmux" scheme="https://liam.page/tags/Tmux/"/>
    
  </entry>
  
  <entry>
    <title>古诗词文赏析：鹊桥仙·纤云弄巧</title>
    <link href="https://liam.page/2019/03/03/Queqiaoxian-Xianyunnongqiao/"/>
    <id>https://liam.page/2019/03/03/Queqiaoxian-Xianyunnongqiao/</id>
    <published>2019-03-03T07:50:32.000Z</published>
    <updated>2019-03-11T07:17:32.436Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个纯正的理工科学生，虽然在读书时代语文成绩不好，却在这些年随着阅历的增长，慢慢地能够感受到古诗词文传递的情绪、情感、力量甚至中国古代士子的精神追求。每次读到横渠四句，也会忍不住想要「为天地立心，为生民立命，为往圣继绝学，为万世开太平」。这大概是与中国人的文化血脉分不开的什么东西——说不清道不明，但又确实存在。于是，就这么带着不少冲动，决定开启古诗词文赏析这个系列的大坑，试着要去填一填。——哪怕填不好，哪怕会贻笑大方。但我写的是我自己的理解，希望能带给读者一些以前未有过的感受。</p><p>此篇谈谈秦观的佳作：鹊桥仙·纤云弄巧。</p><blockquote><p>纤云弄巧，飞星传恨，银汉迢迢暗渡。金风玉露一相逢，便胜却人间无数。<br>柔情似水，佳期如梦，忍顾鹊桥归路。两情若是久长时，又岂在朝朝暮暮？</p></blockquote><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这首鹊桥仙的背景，作为中国人大概再熟悉不过了。这是一首七夕词，说的是牛郎和织女的故事。</p><p>作为中国最著名的爱情故事——可能没有之一，牛郎和织女的故事不一定是一个悲剧，但一定是充满了<strong>遗憾</strong>色彩的故事。而遗憾，正是男女情感之间，最令人感怀的一种情绪。正因如此，在中国古代，有不少诗词曲以七夕和牛郎织女的故事为题，寄托诗词作者自己的情感。其中传唱最久远的，大概是汉乐府的一首古诗：</p><blockquote><p>汉乐府·古诗十九首之一<br>迢迢牵牛星，皎皎河汉女。<br>纤纤擢素手，札札弄机杼。<br>终日不成章，泣涕零如雨。<br>河汉清且浅，相去复几许。<br>盈盈一水间，脉脉不得语。</p></blockquote><p>也许是因为牛郎织女故事中的遗憾，七夕诗词曲大多逃不开「痴男怨女」的基调。例如此处汉乐府的古诗就细致地描写了织女因相似而不成章、泣涕如雨的样子，又讲银河就那么清浅，却与情郎不得相见叙说的苦闷。</p><p>秦观的鹊桥仙却别出机杼，堪称七夕诗词之最。</p><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><blockquote><p>纤云弄巧，飞星传恨，银汉迢迢暗渡。</p></blockquote><p>上阙开头的第一句极其巧妙。</p><p>首先，牛郎织女是两颗星星。于是讲七夕的故事，肯定是晚上天空里的事情。写「纤云弄巧」，描写天上云彩的变化，就必须要「抬头看天」；写「飞星传恨」，描写一闪而逝的流行，就暗示了「夜晚」的场景。其次，牛郎织女一年一会，分开之后相会之前，肯定有数不尽的思绪要说，说不出来就变成恨。思绪万千就如同天上的云朵变换，思绪不得传达，就恨不得能如流星那样快点传达给对方。最后，「迢迢」和「暗渡」又体现了爱人相见之前的情绪。迢迢是「悄悄地」的意思：爱人相会自然是悄悄地私会，又要避开「王母」。暗渡中的「暗」字承接了「迢迢」悄悄的义项，「渡」字又承接「弄巧」、「传恨」，透出急迫的心情。</p><p>不过，上阙第一句巧妙有余，但其余不足。第一句仅仅是叙事，传达出的作者的情感态度却很少。若凭此就能成为七夕词之最，未免名不副实。我们接下来看第二句。</p><blockquote><p>金风玉露一相逢，便胜却人间无数。</p></blockquote><p>上阙第二句乃是一绝。这句没有七夕之哀愁，化恨为惜、化恨为喜。秋风秋露原本是平平一见的事物，但到了七夕这一天，在牛郎织女的眼里，那便是金风玉露。足以衬托出牛郎织女相见的不易。爱人之间，一年才能见一次，见到了难道不珍惜？悲了一年，难道不喜？如此难道不胜过人间万事？</p><blockquote><p>柔情似水，佳期如梦，忍顾鹊桥归路。</p></blockquote><p>下阙第一句写两人相见时互诉情深，其柔情似水，又写这短暂相会的「假期」如梦一样短暂，离开时不敢看鹊桥。这似乎又回到了悲恨交织的轨道了，看起来大煞风景。要知道，描写这种情绪，再怎么也妙不过「盈盈一水间，脉脉不得语」的画面感。但是，秦观在下一句却峰回路转、神来之笔，传唱天下。</p><blockquote><p>两情若是久长时，尤其在朝朝暮暮？</p></blockquote><p>人人都知道牛郎织女感情深，但这么多七夕诗词却摆脱不了怨憎的窠臼。整首词写牛郎织女：见前恨，见时喜，离别悲。而后在最后一句又看破离别苦恨难分难舍，讲「有情人不怕千山万水之隔」。这句饱含的感情至真至善，一举超越千万七夕诗词，传唱天下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个纯正的理工科学生，虽然在读书时代语文成绩不好，却在这些年随着阅历的增长，慢慢地能够感受到古诗词文传递的情绪、情感、力量甚至中国古代士子的精神追求。每次读到横渠四句，也会忍不住想要「为天地立心，为生民立命，为往圣继绝学，为万世开太平」。这大概是与中国人的文化血脉分不开的什么东西——说不清道不明，但又确实存在。于是，就这么带着不少冲动，决定开启古诗词文赏析这个系列的大坑，试着要去填一填。——哪怕填不好，哪怕会贻笑大方。但我写的是我自己的理解，希望能带给读者一些以前未有过的感受。&lt;/p&gt;
&lt;p&gt;此篇谈谈秦观的佳作：鹊桥仙·纤云弄巧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;纤云弄巧，飞星传恨，银汉迢迢暗渡。金风玉露一相逢，便胜却人间无数。&lt;br&gt;柔情似水，佳期如梦，忍顾鹊桥归路。两情若是久长时，又岂在朝朝暮暮？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Literature and Social Sciences" scheme="https://liam.page/categories/Literature-and-Social-Sciences/"/>
    
    
      <category term="Poetry" scheme="https://liam.page/tags/Poetry/"/>
    
  </entry>
  
  <entry>
    <title>赏析谭晶在歌手 2018 上演唱的九儿</title>
    <link href="https://liam.page/2019/02/26/appreciate-and-analyze-Tan-Jing-s-Jiuer-on-Singers/"/>
    <id>https://liam.page/2019/02/26/appreciate-and-analyze-Tan-Jing-s-Jiuer-on-Singers/</id>
    <published>2019-02-26T02:37:25.000Z</published>
    <updated>2019-02-26T02:45:22.705Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>动不了笔，让我再多循环几遍再说……<br><a href="https://www.bilibili.com/video/av21583288/" target="_blank" rel="noopener">https://www.bilibili.com/video/av21583288/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;动不了笔，让我再多循环几遍再说……&lt;br&gt;&lt;a href=&quot;https://www.bilibili.com/video/av21583288/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibil
      
    
    </summary>
    
      <category term="Music" scheme="https://liam.page/categories/Music/"/>
    
    
      <category term="Tan Jing" scheme="https://liam.page/tags/Tan-Jing/"/>
    
      <category term="Jiuer" scheme="https://liam.page/tags/Jiuer/"/>
    
  </entry>
  
  <entry>
    <title>像递归一样的函数模板调用</title>
    <link href="https://liam.page/2019/02/19/recursive-like-function-template-calling/"/>
    <id>https://liam.page/2019/02/19/recursive-like-function-template-calling/</id>
    <published>2019-02-19T08:02:59.000Z</published>
    <updated>2019-02-19T08:25:36.059Z</updated>
    
    <content type="html"><![CDATA[<p>遇到一个蛮奇葩的问题：在 C++ 中如何不用循环和递归，打印从 1 至 N 的自然数？</p><p>想了想，用模板元编程可以解决——让编译器在编译期把该打印的东西都展开就好了。</p><a id="more"></a><p>直接上代码好了……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">counting</span><span class="params">(<span class="built_in">std</span>::ostream&amp; os)</span> </span>&#123;</span><br><span class="line">  counting&lt;N - <span class="number">1</span>&gt;(os);  <span class="comment">// *</span></span><br><span class="line">  os &lt;&lt; N &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">void</span> counting&lt;<span class="number">1</span>&gt;(<span class="built_in">std</span>::ostream&amp; os) &#123;</span><br><span class="line">  os &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">  counting&lt;N&gt;(<span class="built_in">std</span>::<span class="built_in">cout</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，(*) 处有类似递归的调用。但由于 <code>counting</code> 是函数模板，所以 <code>counting&lt;N&gt;</code> 调用的 <code>counting&lt;N - 1&gt;</code> 并非自身，因此不是递归。</p><p>编译器在实例化 <code>counting&lt;N&gt;</code> 的时候，由于它调用了 <code>counting&lt;N - 1&gt;</code>，所以在编译期会递归地实例化下去——直到遇见全特化的 <code>counting&lt;1&gt;</code> 为止。这段代码利用了编译器在编译期的递归替代运行期的递归，巧妙地绕过了原始问题的限制。</p><blockquote><p>类似的手段也可以运用在类模板上。在 YTL 的 <code>traits</code> 库当中就有这样的运用。</p></blockquote><p>不过要注意，既然是递归，就有可能爆栈。编译器递归实例化的深度是有限制的。<code>clang 3.4</code> 的默认限制是 256 层而 <code>gcc 8.2</code> 的默认限制是 900 层。超过这一限制会引发编译器 Fatal error 而编译失败。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到一个蛮奇葩的问题：在 C++ 中如何不用循环和递归，打印从 1 至 N 的自然数？&lt;/p&gt;
&lt;p&gt;想了想，用模板元编程可以解决——让编译器在编译期把该打印的东西都展开就好了。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm and Computer Science" scheme="https://liam.page/categories/Algorithm-and-Computer-Science/"/>
    
    
      <category term="Template" scheme="https://liam.page/tags/Template/"/>
    
      <category term="C++" scheme="https://liam.page/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>寻找不小于给定整数的最小的 2 的幂方</title>
    <link href="https://liam.page/2019/02/14/find-smallest-power-of-2-that-is-not-less-than-a-given-integer/"/>
    <id>https://liam.page/2019/02/14/find-smallest-power-of-2-that-is-not-less-than-a-given-integer/</id>
    <published>2019-02-14T02:36:18.000Z</published>
    <updated>2019-02-19T03:07:48.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇简单的记录。</p></blockquote><p>最近在写 YTL 的过程中遇到这样一个子问题：需要定义一个函数 <code>uint32_t func(uint32_t num)</code>，返回不小于 <code>num</code> 的最小的 2 的幂方。例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == func(<span class="number">1</span>);</span><br><span class="line"><span class="number">2</span> == func(<span class="number">2</span>);</span><br><span class="line"><span class="number">4</span> == func(<span class="number">3</span>);</span><br><span class="line"><span class="number">4</span> == func(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// ……</span></span><br></pre></td></tr></table></figure><p>一开始我想了个用位运算的奇技淫巧，自我感觉还不错：</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint32_t</span> func(<span class="keyword">uint32_t</span> num) &#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (res &lt; num) &#123;</span><br><span class="line">    res &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来一想，「不要在编译器面前装屄」，于是发现老实用 <code>std::log2</code> 来计算的话，效率要高出五倍多：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="keyword">uint32_t</span> func(<span class="keyword">uint32_t</span> num) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="built_in">std</span>::log2(num)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再一想，<code>std::ceil</code> 本来就快，<code>std::log2</code> 有快速解法。那么如果把 <code>1 &lt;&lt; foo</code> 换成 <code>std::pow(2.0, foo)</code> 会怎样呢？结果发现，大概是由于 <code>std::pow</code> 是为浮点数运算设计的，所以没为 2 的幂方做优化，所以效率还不如位运算：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="keyword">uint32_t</span> func(<span class="keyword">uint32_t</span> num) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">pow</span>(<span class="number">2.0</span>, <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="built_in">std</span>::log2(num)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是一篇简单的记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在写 YTL 的过程中遇到这样一个子问题：需要定义一个函数 &lt;code&gt;uint32_t func(uint32_t num)&lt;/code&gt;，返回不小于 &lt;code&gt;num&lt;/code&gt; 的最小的 2 的幂方。例如&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; == func(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == func(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; == func(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; == func(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一开始我想了个用位运算的奇技淫巧，自我感觉还不错：&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm and Computer Science" scheme="https://liam.page/categories/Algorithm-and-Computer-Science/"/>
    
    
      <category term="C++" scheme="https://liam.page/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>为 XeLaTeX 所调用时 xDVIPDFMx 的默认参数</title>
    <link href="https://liam.page/2019/02/12/default-flags-for-xDVIPDFMx/"/>
    <id>https://liam.page/2019/02/12/default-flags-for-xDVIPDFMx/</id>
    <published>2019-02-12T07:37:34.000Z</published>
    <updated>2019-02-12T08:03:12.832Z</updated>
    
    <content type="html"><![CDATA[<p>去年，有人在群里<a href="https://t.me/chinesetex/3441" target="_blank" rel="noopener">提及</a>：</p><blockquote><p>在 macOS 上，同样是使用 STFangSong 字体，使用 LaTeXmk 编译出来的文档在 Windows 上查看会<a href="/uploads/pdf/latexmk-mac.pdf">乱码</a>，但使用 XeLaTeX 直接编译则<a href="/uploads/pdf/xelatex-mac.pdf">正常</a>。MWE 是：<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">&#123;ctexbook&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">fangsong</span></span></span><br><span class="line">中文</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>具体的编译命令分别是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">latexmk -<span class="built_in">cd</span> -f -xelatex -interaction=nonstopmode -synctex=1 --output-directory=output foo.tex</span><br><span class="line">xelatex -interaction=nonstopmode -synctex=1 --output-directory=output foo.tex</span><br></pre></td></tr></table></figure></p></blockquote><p>这个问题直至近期查看了 XeLaTeX 的源码才得到了完整答案。</p><a id="more"></a><h2 id="字体嵌入"><a href="#字体嵌入" class="headerlink" title="字体嵌入"></a>字体嵌入</h2><p>根据 Ao Zhang 的检查，<a href="/uploads/pdf/latexmk-mac.pdf"><code>latexmk-mac.pdf</code></a> 当中没有如 <a href="/uploads/pdf/xelatex-mac.pdf"><code>xelatex-mac.pdf</code></a> 那样嵌入字体。</p><p><img src="/uploads/images/LaTeX/no-font-embedding.jpg" alt=""></p><p>由于找不到相应字体，Windows 上查看文档时，就乱码了。</p><h2 id="驱动-xDVIPDFMx"><a href="#驱动-xDVIPDFMx" class="headerlink" title="驱动 xDVIPDFMx"></a>驱动 <code>xDVIPDFMx</code></h2><p>XeLaTeX 输出的文件格式是扩展 DVI（eXtended DVI, <code>.xdv</code>）。不过，XeLaTeX 在执行到最后时会调用驱动，将 <code>.xdv</code> 文件转为 <code>.pdf</code> 格式，并将 <code>.xdv</code> 文件删除。默认的驱动是 <code>xDVIPDFMx</code>，它与 <code>DVIPDFMx</code> 系出同源。</p><p>使用 LaTeXmk 编译的文档没有嵌入字体，显然与 <code>xDVIPDFMx</code> 有关。经检查，LaTeXmk 考虑到多次编译时，只有最后一次编译需要真正输出 PDF 文件，故而在调用 XeLaTeX 时加上了 <code>-no-pdf</code> 选项，同时在最后一次调用 XeLaTeX 之后去调用 <code>xDVIPDFMx</code>。大致可以理解为 LaTeXmk 会按如下方式执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xelatex -no-pdf [other-options] foo.tex</span><br><span class="line">bibtex foo</span><br><span class="line">makeindex foo</span><br><span class="line">xelatex -no-pdf [other-options] foo.tex</span><br><span class="line">xelatex -no-pdf [other-options] foo.tex</span><br><span class="line">xdvipdfmx foo</span><br></pre></td></tr></table></figure><p>问题出在最后调用 <code>xDVIPDFMx</code> 的时候。若要嵌入字体，应当加上 <code>-E</code> 选项。但是默认情况下，LaTeXmk 没加上这一选项。所以，默认情况下，由 LaTeXmk 编译出来的 PDF 文档不会嵌入字体。具体到我们的例子中，<a href="/uploads/pdf/latexmk-mac.pdf"><code>latexmk-mac.pdf</code></a> 在 Windows 上显示为乱码。</p><h2 id="XeLaTeX-调用-xDVIPDFMx-时的默认参数"><a href="#XeLaTeX-调用-xDVIPDFMx-时的默认参数" class="headerlink" title="XeLaTeX 调用 xDVIPDFMx 时的默认参数"></a>XeLaTeX 调用 <code>xDVIPDFMx</code> 时的默认参数</h2><p>至此，「在 macOS 上使用 LaTeXmk 编译的文档在 Windows 上乱码」这一问题已经可以解释。但是问题的另一半，即「为什么在 macOS 上使用 XeLaTeX 编译的文档在 Windows 上不会乱码」这一问题还没回答。显然，这仍与 <code>xDVIPDFMx</code> 的调用参数有关。</p><p>经查，XeLaTeX 在指定输出驱动为 <code>xDVIPDFMx</code> 时的 C 代码为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *outputdriver = <span class="string">"xdvipdfmx -q -E"</span>; <span class="comment">/* default to portable xdvipdfmx driver */</span></span><br></pre></td></tr></table></figure><p>可见，调用时添加了 <code>-q</code> 和 <code>-E</code> 两个参数。其中 <code>-q</code> 表示静默模式，即 <code>xDVIPDFMx</code> 不会输出任何回显信息；<code>-E</code> 表示忽略字体版权标记而总是将字体嵌入输出文件。</p><p>如此一来，问题的另一半也得到了合理解释。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年，有人在群里&lt;a href=&quot;https://t.me/chinesetex/3441&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;提及&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 macOS 上，同样是使用 STFangSong 字体，使用 LaTeXmk 编译出来的文档在 Windows 上查看会&lt;a href=&quot;/uploads/pdf/latexmk-mac.pdf&quot;&gt;乱码&lt;/a&gt;，但使用 XeLaTeX 直接编译则&lt;a href=&quot;/uploads/pdf/xelatex-mac.pdf&quot;&gt;正常&lt;/a&gt;。MWE 是：&lt;br&gt;&lt;figure class=&quot;highlight tex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;documentclass&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;ctexbook&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;document&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;fangsong&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;中文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;\&lt;span class=&quot;name&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;#123;document&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;具体的编译命令分别是：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;latexmk -&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; -f -xelatex -interaction=nonstopmode -synctex=1 --output-directory=output foo.tex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xelatex -interaction=nonstopmode -synctex=1 --output-directory=output foo.tex&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题直至近期查看了 XeLaTeX 的源码才得到了完整答案。&lt;/p&gt;
    
    </summary>
    
      <category term="LaTeX" scheme="https://liam.page/categories/LaTeX/"/>
    
    
      <category term="Drivers" scheme="https://liam.page/tags/Drivers/"/>
    
      <category term="xDVIPDFMx" scheme="https://liam.page/tags/xDVIPDFMx/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX 插图时对文件扩展名的处理</title>
    <link href="https://liam.page/2019/01/27/keep-single-dot-in-image-filename-for-LaTeX/"/>
    <id>https://liam.page/2019/01/27/keep-single-dot-in-image-filename-for-LaTeX/</id>
    <published>2019-01-27T11:04:27.000Z</published>
    <updated>2019-02-01T10:59:10.689Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇简单的记录，缘起于有人在 XeLaTeX 中插入 <code>.png</code> 格式的图片，但提示 <code>no boundingbox</code>。这与我的认知不同：这一错误通常只在 LaTeX 方式编译时才会出现，而且加上 <code>bmpsize</code> 宏包结合 <code>DVIPDFMx</code> 驱动就能解决。但这次问题出现在 <code>XeLaTeX</code> 下，我感到很奇怪，也引起了我的兴趣。</p><a id="more"></a><h2 id="MWE"><a href="#MWE" class="headerlink" title="MWE"></a>MWE</h2><p>最小工作示例如下：</p><figure class="highlight tex"><figcaption><span>test.tex</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% compile with XeLaTeX</span></span><br><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">&#123;article&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;graphicx&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line">  <span class="tag">\<span class="name">includegraphics</span><span class="string">&#123;foo.bar.png&#125;</span></span>   <span class="comment">% reports error (no boundingbox)</span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><p>报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">! LaTeX Error: Cannot determine size of graphic in foo.bar.png (no BoundingBox)</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">See the LaTeX manual or LaTeX Companion for explanation.</span><br><span class="line">Type  H &lt;return&gt;  for immediate help.</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">l.5   \includegraphics&#123;foo.bar.png&#125;</span><br><span class="line">                                      % reports error (no boundingbox)</span><br><span class="line">?</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>如前所述，这就很奇怪了。我第一反应是图片本身有什么问题。但多方检查都没发现有什么问题。考虑到同样的代码在 pdfLaTeX 下编译理应也能通过并顺利输出，故执行命令 <code>pdflatex test.tex</code>，并观察现象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">! LaTeX Error: Unknown graphics extension: .bar.png.</span><br><span class="line"></span><br><span class="line">See the LaTeX manual or LaTeX Companion for explanation.</span><br><span class="line">Type  H &lt;return&gt;  for immediate help.</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">l.5   \includegraphics&#123;foo.bar.png&#125;</span><br><span class="line">                                      % reports error (no boundingbox)</span><br><span class="line">?</span><br></pre></td></tr></table></figure><p>出乎意料，本该顺利通过的代码，在 pdfLaTeX 下也报错了。不过，这次报错的问题和使用 XeLaTeX 时还不太一样。pdfLaTeX 提示说不认识名为 <code>.bar.png</code> 的图片扩展名。</p><p>这给了我新的提示。显然 pdfLaTeX 在处理图片时，以第一个 <code>.</code> 作为分割，之后的部分都是扩展名；而后根据图片文件的扩展名去处理。推测 XeLaTeX 也会做类似的操作，只是细节上有所不同，XeLaTeX 没有在遇见 <code>.bar.png</code> 这个扩展名的第一时间报错，而是延迟到了计算边界框尺寸时发现没有匹配该扩展名（<code>.bar.png</code>）时才报错。如果确实如此，那么在 <code>graphicx.sty</code> 当中应该有所体现。追溯到 <code>graphicx.sty</code> 依赖的 <code>graphics.sty</code> 当中：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">def</span></span><span class="tag">\<span class="name">Ginclude</span></span>@graphics#1&#123;<span class="comment">%</span></span><br><span class="line">  <span class="tag">\<span class="name">begingroup</span></span></span><br><span class="line">  <span class="tag">\<span class="name">let</span></span><span class="tag">\<span class="name">input</span></span>@path<span class="tag">\<span class="name">Ginput</span></span>@path</span><br><span class="line">  <span class="tag">\<span class="name">filename</span></span>@parse&#123;#1&#125;<span class="comment">%</span></span><br><span class="line">  <span class="tag">\<span class="name">ifx</span></span><span class="tag">\<span class="name">filename</span></span>@ext<span class="tag">\<span class="name">relax</span></span></span><br><span class="line"><span class="comment">% ...</span></span><br></pre></td></tr></table></figure><p>显然，<code>\filename@parse</code> 是在解析图片文件的文件名。这是一个定义在 LaTeX2e 中的底层命令，根据其文档，它会将解析结果保存在 <code>\filename@area</code>, <code>\filename@base</code>, <code>\filename@ext</code> 三个宏当中。在 <code>\filename@parse</code> 的定义中，解析扩展名是通过利用 TeX 的宏定义式的技巧来实现的：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">def</span></span><span class="tag">\<span class="name">filename</span></span>@simple#1.#2</span><br></pre></td></tr></table></figure><p>在调用 <code>\filename@simple</code> 时，会将遇到的第一个 <code>.</code> 之前的内容当做 <code>#1</code> 而把 <code>.</code> 之后的内容当做 <code>#2</code>。这个 <code>#2</code> 最后被保存在了 <code>\filename@ext</code> 当中，作为文件扩展名。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>了解了问题的根源，解决起来就容易了。</p><p>最简单的绕过办法，是保持图片文件的文件名当中只有一个句点，用于区分文件名及其扩展名。这样 TeX 就不会被误导了。例如，将 MWE 中的文件名从 <code>foo.bar.png</code> 改为 <code>foo_bar.png</code>，再尝试于 LaTeX 当中插入。</p><p>如果不想修改文件名，那么可以利用 TeX 的分组，将真实的文件名包裹在一对分组花括号当中。也就是写成形如这样的代码 <code>{foo.bar}.png</code>。这样，在 <code>\filename@simple</code> 处理参数的过程中，由于 <code>foo.bar</code> 被放在一个分组当中，整个被当成是一个 token，因而不会被打散，也因而能解析到正确的扩展名 <code>png</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇简单的记录，缘起于有人在 XeLaTeX 中插入 &lt;code&gt;.png&lt;/code&gt; 格式的图片，但提示 &lt;code&gt;no boundingbox&lt;/code&gt;。这与我的认知不同：这一错误通常只在 LaTeX 方式编译时才会出现，而且加上 &lt;code&gt;bmpsize&lt;/code&gt; 宏包结合 &lt;code&gt;DVIPDFMx&lt;/code&gt; 驱动就能解决。但这次问题出现在 &lt;code&gt;XeLaTeX&lt;/code&gt; 下，我感到很奇怪，也引起了我的兴趣。&lt;/p&gt;
    
    </summary>
    
      <category term="LaTeX" scheme="https://liam.page/categories/LaTeX/"/>
    
    
      <category term="Graphicx" scheme="https://liam.page/tags/Graphicx/"/>
    
  </entry>
  
  <entry>
    <title>在 C++ 中移除序列中连续重复的特定值</title>
    <link href="https://liam.page/2019/01/27/remove-consecutive-duplicates-in-Cxx/"/>
    <id>https://liam.page/2019/01/27/remove-consecutive-duplicates-in-Cxx/</id>
    <published>2019-01-27T06:02:18.000Z</published>
    <updated>2019-01-27T07:07:07.735Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写 YTL 中的字符串相关辅助函数。实现到 <code>split</code> 函数时，希望能够实现类似 Python 当中的 <code>str.split</code> 方法的功能。</p><blockquote><p>If <code>sep</code> is not specified or is <code>None</code>, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace.<br>——<a href="https://docs.python.org/3/library/stdtypes.html#str.split" target="_blank" rel="noopener">https://docs.python.org/3/library/stdtypes.html#str.split</a></p></blockquote><p>也就是说，在最基本的 <code>split</code> 的基础上，要添加两个功能：</p><ul><li>删除输入字符串首尾的空白；</li><li>将字符串中的连续分隔符当成一个分隔符看待。</li></ul><p>前一个功能很好实现。将空白符保存在 <code>const char* trim_chars = &quot; \t\n\r\v\f&quot;</code> 当中，然后使用 <code>std::string::find_first_not_of</code> 以及 <code>std::string::find_last_not_of</code> 即可找到有效内容的起止位置，最后再 <code>std::string::erase</code> 一下就好了。</p><p>后一个功能也不复杂。但要写得优雅——最好是能利用上标准库的设施——就不那么容易了。</p><a id="more"></a><h2 id="std-unique-的基本用法"><a href="#std-unique-的基本用法" class="headerlink" title="std::unique 的基本用法"></a><code>std::unique</code> 的基本用法</h2><p><code>std::unique</code> 是定义在 <code>algorithm</code> 头文件内的容器算法。它有两种基本形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">ForwardIt</span> <span class="title">unique</span>( <span class="title">ForwardIt</span> <span class="title">first</span>, <span class="title">ForwardIt</span> <span class="title">last</span> );</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, <span class="title">class</span> <span class="title">BinaryPredicate</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">ForwardIt</span> <span class="title">unique</span>( <span class="title">ForwardIt</span> <span class="title">first</span>, <span class="title">ForwardIt</span> <span class="title">last</span>, <span class="title">BinaryPredicate</span> <span class="title">p</span> );</span></span><br></pre></td></tr></table></figure><p>其中，第一种形式是第二种形式的特例，它等价于 <code>BinaryPredicate p</code> 为连续两元素相等性判断时的第二种形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>,</span></span><br><span class="line"><span class="class">          <span class="title">class</span> <span class="title">BinaryPredicate</span> =</span></span><br><span class="line"><span class="class">            <span class="title">std</span>:</span>:function&lt;<span class="keyword">bool</span>(<span class="keyword">const</span> <span class="keyword">typename</span> <span class="built_in">std</span>::iterator_traits&lt;ForwardIt&gt;::value_type&amp;,</span><br><span class="line">              <span class="keyword">const</span> <span class="keyword">typename</span> <span class="built_in">std</span>::iterator_traits&lt;ForwardIt&gt;::value_type&amp;)&gt;</span><br><span class="line"><span class="function">ForwardIt <span class="title">unique</span><span class="params">( ForwardIt first, ForwardIt last,</span></span></span><br><span class="line"><span class="function"><span class="params">            BinaryPredicate p = [](<span class="keyword">const</span> <span class="keyword">typename</span> <span class="built_in">std</span>::iterator_traits&lt;ForwardIt&gt;::value_type&amp; lhs,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">const</span> <span class="keyword">typename</span> <span class="built_in">std</span>::iterator_traits&lt;ForwardIt&gt;::value_type&amp; rhs) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">return</span> lhs == rhs; &#125;)</span></span>;</span><br></pre></td></tr></table></figure><p>这也就是说，第一种形式的 <code>std::unique</code> 会找到每个连续重复的区间，而后保留这些区间的首个元素，最后返回新序列逻辑上的尾后迭代器。例如，<code>aabbccaa</code> 经过 <code>std::unique</code> 处理之后得到：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abca????</span><br><span class="line">    ↑</span><br></pre></td></tr></table></figure><p>这里用箭头标出的位置，即是 <code>std::unique</code> 的返回值所指向的位置。需要注意的是，经过 <code>std::unique</code> 处理之后，容器的实际大小没有发生改变，甚至逻辑尾后迭代器到容器实际尾后迭代器之间的左闭右开区间内的迭代器仍然是可解引用的（dereferenceable）。但这部分区间内的元素的值是不确定的。因此，在使用 <code>std::unqiue</code> 之后，往往会调用容器的 <code>erase</code> 函数成员，删除逻辑尾后迭代器开始的所有元素。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;string&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">source</span><span class="params">(<span class="string">"aabbccaa"</span>)</span></span>;</span><br><span class="line">source.erase(<span class="built_in">std</span>::unique(source.begin(), source.end()), source.end());</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; source &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;  <span class="comment">// expect result: abca</span></span><br></pre></td></tr></table></figure><h2 id="只对特定内容进行-std-unique-操作"><a href="#只对特定内容进行-std-unique-操作" class="headerlink" title="只对特定内容进行 std::unique 操作"></a>只对特定内容进行 <code>std::unique</code> 操作</h2><p>回到最开始的问题。我们需要的功能，是针对分隔符 <code>sep</code> 进行操作，将连续出现的 <code>sep</code> 压缩成一个。<code>std::unique</code> 的默认行为则不然，它会将所有连续出现的元素都压缩成一个——不光是 <code>sep</code>。为此，我们需要实现自己的 <code>BinaryPredicate</code>。首先，由于我们要指定具体需要被 <code>std::unique</code> 压缩的元素，我们必然要将其作为函数参数传入函数。于是我们有以下实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;functional&gt;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AreConsecutiveElements</span><span class="params">(<span class="keyword">const</span> T&amp; target, <span class="keyword">const</span> T&amp; lhs, <span class="keyword">const</span> T&amp; rhs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (lhs == rhs) <span class="keyword">and</span> (lhs == target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::unique</code> 要求一个二元谓词（<code>BinaryPredicate</code>），但此处我们实现的是三元谓词。于是，好在 <code>target</code> 总是应当预先给出的，所以我们可以利用 <code>std::bind</code> 将 <code>target</code> 绑定在 <code>AreConsecutiveElements</code> 的第一个参数上，产生一个二元谓词。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;functional&gt;</span></span><br><span class="line"><span class="comment">// using namespace std::placeholders;</span></span><br><span class="line"><span class="comment">// #include &lt;string&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> target = <span class="string">'b'</span></span><br><span class="line"><span class="keyword">auto</span> binp = <span class="built_in">std</span>::bind(AreConsecutiveElements, target, _1, _2);</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">source</span><span class="params">(<span class="string">"aabbccaa"</span>)</span></span>;</span><br><span class="line">source.erase(<span class="built_in">std</span>::unique(source.begin(), source.end(), binp), source.end());</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; source &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;  <span class="comment">// expect result: aabccaa</span></span><br></pre></td></tr></table></figure><p>这里，我们将 <code>&#39;b&#39;</code> 作为压缩目标，并将其与 <code>AreConsecutiveElements</code> 绑定在一起，产生一个新的二元谓词。最终输出期待的结果。</p><hr><h2 id="附：std-unique-的一个可能实现"><a href="#附：std-unique-的一个可能实现" class="headerlink" title="附：std::unique 的一个可能实现"></a>附：<code>std::unique</code> 的一个可能实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, <span class="title">class</span> <span class="title">BinaryPredicate</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">ForwardIt</span> <span class="title">unique</span>(<span class="title">ForwardIt</span> <span class="title">first</span>, <span class="title">ForwardIt</span> <span class="title">last</span>, <span class="title">BinaryPredicate</span> <span class="title">p</span>) &#123;</span></span><br><span class="line">  <span class="keyword">if</span> (first == last) &#123;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ForwardIt result = first;</span><br><span class="line">  <span class="keyword">while</span> (++first != last) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p(*result, *first) &amp;&amp; ++result != first) &#123;</span><br><span class="line">      *result = <span class="built_in">std</span>::move(*first);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ++result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- 今天是老女人邢坤悦的 28 岁生日。但邢坤悦是个婊子，我肏烂她全家女性的骚屄。 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写 YTL 中的字符串相关辅助函数。实现到 &lt;code&gt;split&lt;/code&gt; 函数时，希望能够实现类似 Python 当中的 &lt;code&gt;str.split&lt;/code&gt; 方法的功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If &lt;code&gt;sep&lt;/code&gt; is not specified or is &lt;code&gt;None&lt;/code&gt;, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace.&lt;br&gt;——&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.split&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.python.org/3/library/stdtypes.html#str.split&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，在最基本的 &lt;code&gt;split&lt;/code&gt; 的基础上，要添加两个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除输入字符串首尾的空白；&lt;/li&gt;
&lt;li&gt;将字符串中的连续分隔符当成一个分隔符看待。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前一个功能很好实现。将空白符保存在 &lt;code&gt;const char* trim_chars = &amp;quot; \t\n\r\v\f&amp;quot;&lt;/code&gt; 当中，然后使用 &lt;code&gt;std::string::find_first_not_of&lt;/code&gt; 以及 &lt;code&gt;std::string::find_last_not_of&lt;/code&gt; 即可找到有效内容的起止位置，最后再 &lt;code&gt;std::string::erase&lt;/code&gt; 一下就好了。&lt;/p&gt;
&lt;p&gt;后一个功能也不复杂。但要写得优雅——最好是能利用上标准库的设施——就不那么容易了。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm and Computer Science" scheme="https://liam.page/categories/Algorithm-and-Computer-Science/"/>
    
    
      <category term="C++" scheme="https://liam.page/tags/C/"/>
    
      <category term="Consecutive" scheme="https://liam.page/tags/Consecutive/"/>
    
      <category term="Duplicate" scheme="https://liam.page/tags/Duplicate/"/>
    
  </entry>
  
  <entry>
    <title>在 LaTeX 中实现缩印效果</title>
    <link href="https://liam.page/2019/01/25/reduced-print-in-LaTeX/"/>
    <id>https://liam.page/2019/01/25/reduced-print-in-LaTeX/</id>
    <published>2019-01-25T02:01:39.000Z</published>
    <updated>2019-01-25T06:07:32.761Z</updated>
    
    <content type="html"><![CDATA[<p>近日大概重拾了一点对 LaTeX 的兴趣，遇见这样一个问题：如何在 LaTeX 中实现缩印效果（即，将两页或更多页排版在一页纸上），并且实现水印效果的页码？</p><a id="more"></a><h2 id="缩印"><a href="#缩印" class="headerlink" title="缩印"></a>缩印</h2><p>以朴素的办法实现缩印效果并不困难。例如，可以先以 LaTeX 正常输出文档，再以 <code>pdfpages</code> 宏包将生成的文档载入进来排版。不过，这样的做法扩展性太差，并且需要至少编译两份文档——一份是原始文档，一份是缩印框架文档。</p><p>更有技巧的办法，需要深入到 TeX 构建页面输出的过程中去。基本上来说，我们需要让 TeX 按往常一样去构建页面，但是在 TeX 准备将页面输出（shipout）时我们需要插入一个钩子。这个钩子做两件事情：</p><ul><li>打断输出过程；</li><li>将整个页面内容保存在一个盒子中备用。</li></ul><p>我们将保存在盒子里的页面称为逻辑页面（logic pages）。而后，当保存的页面足够多时，或没有更多页面需要保存时，将这些盒子的内容成比例缩小并列印在页面上。我们将最终输出的页面称之为物理页面。</p><p><code>pgfpages</code> 就是这样做的。它是 PGF 宏集的一部分，因而使用 <code>texdoc pgf</code> 可以看到它的文档（Section 89）。</p><p>首先我们从一个简单的例子开始，其效果见<a href="/uploads/iamges/LaTeX/2on1-landscape.png">这里</a>。</p><figure class="highlight tex"><figcaption><span>demo-2on1-landscape.tex</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">&#123;article&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;pgfpages&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">pgfpagesuselayout</span><span class="string">&#123;2 on 1&#125;</span><span class="string">[a4paper, landscape, border shrink = 5mm]</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line">This text is shown on the left.</span><br><span class="line"><span class="tag">\<span class="name">clearpage</span></span></span><br><span class="line">This text is shown on the right.</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><p>这里，<code>\pgfpagesuselayout</code> 命令是实现缩印效果的核心命令。参数 <code>2 on 1</code> 的含义不言自明。其后的可选参数：<code>a4paper</code> 表示物理页的尺寸是标准 A4 纸；<code>landscape</code> 表示要将物理页横过来——毕竟是二合一缩印，这很合理；<code>border shink = 5mm</code> 表示被缩印的逻辑页会被继续缩小，并在每个逻辑页的上下左右四周保留宽度为 <code>5mm</code> 的边框。</p><p>类似地，你也可以缩印 <code>beamer</code> 幻灯片。不过，由于 <code>beamer</code> 幻灯片的逻辑页本就是横着的，所以此处不需要在加 <code>landscape</code> 参数了。</p><blockquote><p>相应的，<code>4 on 1</code> 需要加，<code>6 on 1</code> 和 <code>8 on 1</code> 不需要加，以及 <code>16 on 1</code> 又需要加。——<code>32 on 1</code> 是不存在的……</p></blockquote><figure class="highlight tex"><figcaption><span>demo-2on1.tex</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">&#123;beamer&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;pgfpages&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">pgfpagesuselayout</span><span class="string">&#123;2 on 1&#125;</span><span class="string">[a4paper, border shrink=5mm]</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;frame&#125;</span></span></span><br><span class="line">This text is shown at the top.</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;frame&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;frame&#125;</span></span></span><br><span class="line">This text is shown at the bottom.</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;frame&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="页码"><a href="#页码" class="headerlink" title="页码"></a>页码</h2><p>在当前问题中，TeX 默认的页码机制实际上是作用在各个逻辑页上的。但显然，我们可能会想要为物理页编上页码。这里有两个问题需要解决：</p><ul><li>物理页的页码如何确定？</li><li>缩印排版，有效内容字体很小且密集，如何保证物理页页码可见且不影响有效内容的阅读？</li></ul><p>对于第一个问题，有两种思路。</p><p>一是读取逻辑页页码 <code>page</code> 计数器，然后按 <code>x on 1</code> 的比例做除法，得出物理页的页码。不过，这种方式是有前提的。具体来说，它要求 TeX 的逻辑页页码功能不在缩印的情况下失效，并且它要求 TeX 能正确计算整数除法（向上取整）。总得来说，这是一种快而脏的解法，不推荐。</p><blockquote><p>如果十年以后，你以快而脏的方式做什么事的时候，能想象我在你的肩后看着，然后对自己说：「Dijkstra 不会希望这样的。」那么对我来说，这就和永生一样了。<br>—— Edsger Wybe Dijkstra</p></blockquote><p>另一种思路则更加直接。既然页码本质是由计数器实现的，这一计数器随页面输出而自增，而 <code>pgfpages</code> 影响的正是 TeX 页面输出的逻辑，那么 <code>pgfpages</code> 内必然有什么地方可以下钩子来自增该计数器。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">newcommand</span></span><span class="tag">\<span class="name">pgfshipoutphysicalpage</span><span class="string">&#123;%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \ifnum\pgf@logicalpages&gt;0\relax%</span></span></span><br><span class="line"><span class="tag"><span class="string">    \pgfpages@buildshipoutbox%</span></span></span><br><span class="line"><span class="tag"><span class="string">    \pgfpages@shipoutshipoutbox%</span></span></span><br><span class="line"><span class="tag"><span class="string">    \pgfpages@performcopying%</span></span></span><br><span class="line"><span class="tag"><span class="string">    \global\pgfphysicalpageemptytrue%</span></span></span><br><span class="line"><span class="tag"><span class="string">    \global\pgf@holdingphysicalpagefalse%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \fi%</span></span></span><br><span class="line"><span class="tag"><span class="string">&#125;</span></span></span><br></pre></td></tr></table></figure><p>通过翻阅 <code>pgfpages.sty</code> 的源码，我们不难发现有以上代码和物理页输出有关。可以说，PGF 宏集的代码风格相当好，一眼就能看明白代码在做什么。显然，<code>\pgfpages@shipoutshipoutbox</code> 是在输出物理页，而它之前的 <code>\pgfpages@buildshipoutbox</code> 就是将逻辑页构建成物理页的过程了。因此，我们需要在 <code>\pgfpages@buildshipoutbox</code> 当中下钩子；此时我们又要用到老朋友 <code>etoolbox</code> 当中的 <code>\patchcmd</code> 了。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% require packages: pgfpages, etoolbox</span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">newcounter</span><span class="string">&#123;physicalpage&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">makeatletter</span></span></span><br><span class="line"><span class="tag">\<span class="name">patchcmd</span><span class="string">&#123;\pgfpages@buildshipoutbox&#125;</span><span class="string">&#123;%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \pgfsys@beginpicture</span></span></span><br><span class="line"><span class="tag"><span class="string">&#125;</span><span class="string">&#123;%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \pgfsys@beginpicture</span></span></span><br><span class="line"><span class="tag"><span class="string">  \stepcounter&#123;physicalpage&#125;</span></span><span class="comment">%</span></span><br><span class="line">&#125;&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="tag">\<span class="name">makeatother</span></span></span><br></pre></td></tr></table></figure><p>第二个问题可能有多种解决思路。我偏好于在页面中央以水印的形式加一个大大的页码。四年多以前，我利用 TikZ 实现了<a href="/2014/04/22/LaTeX-watermark/">水印功能</a>。TikZ 也是 PGF 宏集的一部分，用在这里正好。于是，我们的代码变为</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% require packages: pgfpages, etoolbox, xcolor, tikz</span></span><br><span class="line"><span class="tag">\<span class="name">newcommand</span><span class="string">&#123;\boxedcontent&#125;</span><span class="string">[5]</span><span class="string">&#123;\parbox[b][\paperheight]&#123;\paperwidth&#125;</span><span class="string">&#123;%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \vfill%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \centering%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \tikz[remember picture, overlay]%</span></span></span><br><span class="line"><span class="tag"><span class="string">    \node [rotate = #1, scale = #2] at (#3)%</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;\textcolor&#123;#4&#125;</span><span class="string">&#123;#5&#125;</span></span>&#125;;</span><br><span class="line">  <span class="tag">\<span class="name">vfill</span></span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">newcounter</span><span class="string">&#123;physicalpage&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">makeatletter</span></span></span><br><span class="line"><span class="tag">\<span class="name">patchcmd</span><span class="string">&#123;\pgfpages@buildshipoutbox&#125;</span><span class="string">&#123;%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \pgfsys@beginpicture</span></span></span><br><span class="line"><span class="tag"><span class="string">&#125;</span><span class="string">&#123;%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \pgfsys@beginpicture</span></span></span><br><span class="line"><span class="tag"><span class="string">  \stepcounter&#123;physicalpage&#125;</span></span><span class="comment">%</span></span><br><span class="line">  <span class="tag">\<span class="name">setbox</span></span>0<span class="tag">\<span class="name">vbox</span><span class="string">&#123;\makebox[0pt][c]&#123;\boxedcontent&#123;0&#125;</span><span class="string">&#123;30&#125;</span><span class="string">&#123;current page.center&#125;</span><span class="string">&#123;gray!80!cyan!30&#125;</span><span class="string">&#123;\arabic&#123;physicalpage&#125;</span></span>&#125;&#125;&#125;<span class="comment">%</span></span><br><span class="line">  <span class="tag">\<span class="name">pgfsys</span></span>@beginscope</span><br><span class="line">  <span class="tag">\<span class="name">pgflowlevel</span><span class="string">&#123;\pgftransformshift&#123;\pgfpoint&#123;0\pgfphysicalwidth&#125;</span><span class="string">&#123;0\pgfphysicalheight&#125;</span></span>&#125;&#125;<span class="comment">%</span></span><br><span class="line">  <span class="tag">\<span class="name">pgfsys</span></span>@hbox0<span class="comment">%</span></span><br><span class="line">  <span class="tag">\<span class="name">pgfsys</span></span>@endscope</span><br><span class="line">&#125;&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="tag">\<span class="name">makeatother</span></span></span><br></pre></td></tr></table></figure><h2 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h2><p>将以上代码综合起来，我做了一个简单的 demo。</p><figure class="highlight tex"><figcaption><span>demo-reduced-print.tex</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">[12pt]</span><span class="string">&#123;article&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;mwe&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">pagestyle</span><span class="string">&#123;empty&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;multicol&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">setlength</span><span class="string">&#123;\columnseprule&#125;</span><span class="string">&#123;0.4pt&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;geometry&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">geometry</span><span class="string">&#123;a4paper, scale = 1, includeall,</span></span></span><br><span class="line"><span class="tag"><span class="string">  margin = 0pt, marginparwidth = 0pt, marginparsep = 0pt,</span></span></span><br><span class="line"><span class="tag"><span class="string">  headheight = 0pt, headsep = 0pt, footskip = 0pt&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;pgfpages&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">pgfpagesuselayout</span><span class="string">&#123;4 on 1&#125;</span><span class="string">[a4paper, border shrink = 1.5mm]</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;tikz&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;xcolor&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;eso-pic&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;etoolbox&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">newcommand</span><span class="string">&#123;\boxedcontent&#125;</span><span class="string">[5]</span><span class="string">&#123;\parbox[b][\paperheight]&#123;\paperwidth&#125;</span><span class="string">&#123;%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \vfill%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \centering%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \tikz[remember picture, overlay]%</span></span></span><br><span class="line"><span class="tag"><span class="string">    \node [rotate = #1, scale = #2] at (#3)%</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#123;\textcolor&#123;#4&#125;</span><span class="string">&#123;#5&#125;</span></span>&#125;;</span><br><span class="line">  <span class="tag">\<span class="name">vfill</span></span>&#125;&#125;</span><br><span class="line"><span class="tag">\<span class="name">newcommand</span><span class="string">&#123;\watermark&#125;</span><span class="string">[3]</span><span class="string">&#123;\AddToShipoutPictureBG&#123;%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \boxedcontent&#123;#1&#125;</span><span class="string">&#123;#2&#125;</span><span class="string">&#123;current page.center&#125;</span><span class="string">&#123;gray!80!cyan!30&#125;</span><span class="string">&#123;#3&#125;</span></span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">newcounter</span><span class="string">&#123;physicalpage&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">makeatletter</span></span></span><br><span class="line"><span class="tag">\<span class="name">patchcmd</span><span class="string">&#123;\pgfpages@buildshipoutbox&#125;</span><span class="string">&#123;%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \pgfsys@beginpicture</span></span></span><br><span class="line"><span class="tag"><span class="string">&#125;</span><span class="string">&#123;%</span></span></span><br><span class="line"><span class="tag"><span class="string">  \pgfsys@beginpicture</span></span></span><br><span class="line"><span class="tag"><span class="string">  \stepcounter&#123;physicalpage&#125;</span></span><span class="comment">%</span></span><br><span class="line">  <span class="tag">\<span class="name">setbox</span></span>0<span class="tag">\<span class="name">vbox</span><span class="string">&#123;\makebox[0pt][c]&#123;\boxedcontent&#123;0&#125;</span><span class="string">&#123;30&#125;</span><span class="string">&#123;current page.center&#125;</span><span class="string">&#123;gray!80!cyan!30&#125;</span><span class="string">&#123;\arabic&#123;physicalpage&#125;</span></span>&#125;&#125;&#125;<span class="comment">%</span></span><br><span class="line">  <span class="tag">\<span class="name">pgfsys</span></span>@beginscope</span><br><span class="line">  <span class="tag">\<span class="name">pgflowlevel</span><span class="string">&#123;\pgftransformshift&#123;\pgfpoint&#123;0\pgfphysicalwidth&#125;</span><span class="string">&#123;0\pgfphysicalheight&#125;</span></span>&#125;&#125;<span class="comment">%</span></span><br><span class="line">  <span class="tag">\<span class="name">pgfsys</span></span>@hbox0<span class="comment">%</span></span><br><span class="line">  <span class="tag">\<span class="name">pgfsys</span></span>@endscope</span><br><span class="line">&#125;&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="tag">\<span class="name">makeatother</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;multicols&#125;</span><span class="string">&#123;3&#125;</span></span></span><br><span class="line">  <span class="tag">\<span class="name">lipsum</span><span class="string">[1-79]</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;multicols&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><p><img src="/uploads/images/LaTeX/demo-reduced-print.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近日大概重拾了一点对 LaTeX 的兴趣，遇见这样一个问题：如何在 LaTeX 中实现缩印效果（即，将两页或更多页排版在一页纸上），并且实现水印效果的页码？&lt;/p&gt;
    
    </summary>
    
      <category term="LaTeX" scheme="https://liam.page/categories/LaTeX/"/>
    
    
      <category term="PGF" scheme="https://liam.page/tags/PGF/"/>
    
      <category term="Reduce Print" scheme="https://liam.page/tags/Reduce-Print/"/>
    
  </entry>
  
  <entry>
    <title>解决升级 Mojave 后 g++ 找不到头文件的问题</title>
    <link href="https://liam.page/2019/01/18/fix-missing-headers-fatal-errors-after-upgraded-to-Mojave/"/>
    <id>https://liam.page/2019/01/18/fix-missing-headers-fatal-errors-after-upgraded-to-Mojave/</id>
    <published>2019-01-18T09:13:37.000Z</published>
    <updated>2019-01-25T03:17:15.984Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 升级 Mojave (10.14) 之后，尝试编译以前编译通过的 C++ 项目，<code>g++-6</code> 提示找不到各种头文件。例如有如下报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./third_party/catch.hpp:69:33: fatal error: TargetConditionals.h: No such file or directory</span><br><span class="line"> <span class="comment"># include &lt;TargetConditionals.h&gt;</span></span><br><span class="line">                                 ^</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure><p>经查，这是因为 macOS 在升级过程中，移除了过时的开发者工具。（不得不说这种无声移除的设计非常<del>傻屄</del>）解决的办法也很简单，重新安装 Command Line Tools 及其头文件包即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br><span class="line">open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg</span><br></pre></td></tr></table></figure><p>参考：<a href="https://forums.developer.apple.com/thread/104296" target="_blank" rel="noopener">https://forums.developer.apple.com/thread/104296</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mac 升级 Mojave (10.14) 之后，尝试编译以前编译通过的 C++ 项目，&lt;code&gt;g++-6&lt;/code&gt; 提示找不到各种头文件。例如有如下报错。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="Computer Skills" scheme="https://liam.page/categories/Computer-Skills/"/>
    
    
      <category term="C++" scheme="https://liam.page/tags/C/"/>
    
      <category term="macOS" scheme="https://liam.page/tags/macOS/"/>
    
      <category term="Mojave" scheme="https://liam.page/tags/Mojave/"/>
    
      <category term="XCode" scheme="https://liam.page/tags/XCode/"/>
    
  </entry>
  
  <entry>
    <title>经济机器是如何运行的</title>
    <link href="https://liam.page/2019/01/17/how-does-economic-machine-work/"/>
    <id>https://liam.page/2019/01/17/how-does-economic-machine-work/</id>
    <published>2019-01-17T04:01:51.000Z</published>
    <updated>2019-01-25T03:17:15.979Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是对<a href="https://open.163.com/movie/2016/6/I/Q/MBPO9ED98_MBPO9S8IQ.html" target="_blank" rel="noopener">经济机器是怎样运行的</a>的整理和再创作。感谢原作者 Ray Dalio。</p></blockquote><p>经济虽然可能看起来复杂，但是其实是以简单和机械的方式运行的。经济有几个简单的零部件和无数次重复的简单交易组成，这些交易首先是由人的天性所驱动，因而形成三股主要的经济动力：一，生产率的提高；二，短期债务周期；三，长期债务周期。</p><p>下面我们谈一下这三股动力，并介绍如何把它们组合在一起，得出一个良好的模型，便于我们跟踪经济走势并理解当前正在发生的事情。</p><a id="more"></a><h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>我们先来说经济中最简单的部分：交易！</p><p>经济不过是无数交易的总和，而交易是一件非常简单的事情。交易时刻都在发生，你每次买东西都是进行一笔交易。在每次交易中，买方使用货币或信用向卖方交换商品服务或金融资产。信用在使用时和货币一样，因此把花费的货币和信用加在一起，就可以得出支出总额。支出总额是经济的驱动力。如果用支出金额除以销量就得出价格。就是这么简单，这就是交易。交易是经济机器的最基本零件，所有的经济周期和动力都是交易造成的。所以理解了交易就理解了整个经济。</p><p>一个市场由买卖同一种商品的所有买方和卖方组成；例如小麦市场，汽车市场股票市场和千百万种其他市场。经济，就是由所有市场内的全部交易构成。把全部市场的总支出和销量加在一起，就得到了了解经济运行所需要的全部信息。就这么简单。</p><p>个人、企业、银行和政府都在以上述方式从事交易，用货币和信用交换商品服务和金融资产。政府是最大的买方和卖方，而政府由两个组成部分：收税和花钱的中央政府和中央银行。央行控制的经济中的货币和信贷数量，因此不同于其他买方和卖方。央行通过影响利率和发行更多货币来实行这种控制。我们在下面会看到，正因如此，央行在信贷流通当中发挥着重要作用。</p><h2 id="信贷"><a href="#信贷" class="headerlink" title="信贷"></a>信贷</h2><p>请诸位注意信贷。信贷是经济中最重要的组成部分，但也许是人们最不了解的部分。它之所以最重要，是因为它是经济中最大且最为变幻莫测的一部分。</p><p>贷款人和借款人已在市场中进行交易的买方和卖方没有两样。通常贷款人希望自己的钱生出更多的钱，而借款人则想购买当前无法负担的某种东西——比如房子汽车或是进行投资，例如开办企业。借贷可以同时满足贷款人和借款人的需要。 借款人保证偿还借款，成为本金并支付额外的款额成为利息。利率高时借贷就会减少，因为贷款变得昂贵；当利率低时借贷就会增加，因为贷款变的便宜。如果借款人保证偿还债务，而且贷款人相信这一承诺，信贷就产生了。任何两个人都可以通过协定凭空创造出信贷。信贷看似简单实则复杂，因为信贷还有其他名称。信贷一旦产生，立即成为债务。债务是贷款人的资产，同时是借款人的负债。等到借款人今后偿还了贷款并支付了利息，这些资产和负债将消失，交易得以完成。</p><p>那么为什么信贷如此重要？这是因为借款人一旦获得信贷，便可以增加自己的支出。不要忘记支出是经济的驱动力——这是因为一个人的支出，是另一个人的收入。想想看，你每花一块钱另一个人就挣了一块钱，而你每挣一块钱必定有别人花了一块钱，所以你花的越多别人挣得就越多！如果某人的收入增加，其信用度就会提高，贷款人就更愿意把钱借给他。信用良好的借款人具备两个条件，偿还能力和抵押物收入。债务比率高，借款人就具备偿还能力。如果无法偿还，借款人还可以用有价值可以出售的资产作为抵押物，这样贷款人可以放心的把钱借给他们。所以收入增加使得借贷也增加，从而能够增加支出。由于一个人的支出是另一个人的收入，这将导致借贷进一步增加，并不断循环。这一自我驱动的模式导致经济增长，也正是因为如此，才产生了经济周期。</p><h2 id="经济周期"><a href="#经济周期" class="headerlink" title="经济周期"></a>经济周期</h2><p>在一项交易中，为了获得某样东西，你必须付出另一样东西，长期来看你得到多少，取决于你生产多少。我们的知识随时间而逐渐增多，知识的积累会提高我们的生活水平，我们将此称为生产率的提高。一个善于创新和勤奋的人将比那些自满和懒惰的人更快地提高生产率和生活水平，但在短期内不一定体现出来！生产率在长期内最关键，但信贷在短期内最重要。这是因为生产率的提高不会剧烈波动，因此不是经济起伏的一个重要动力。但是债务是这种动力，因为我们能够通过借债让消费超过产出！但是在还债时，人们不得不让消费低于产出。债务量的波动有两大周期，其中一个周期持续大约五年至八年，另一个持续大约 75 年至 100 年。大部分人虽然能够感受到波动，但由于离波动太近，每天每周都身临其境，通常并不认为这是周期。我们将考查这三股主要动力，并观察它们如何相互作用，以及它们在日常经济中的表现。</p><h3 id="周期的产生"><a href="#周期的产生" class="headerlink" title="周期的产生"></a>周期的产生</h3><p>如上所述，经济的上下起伏不是取决于人们多么善于创新或勤奋工作，而是主要看信贷的总量。我们先想象一个没有信贷的经济运行，在这样的经济运行中，增加支出的唯一办法是增加收入，因此需要提高生产率和工作量。提高生产率是经济增长的唯一途径。由于我的支出是另一个人的收入，当我或者另一个人提高生产率的时候，经济就会增长。我们如果观察各种交易加以总结，就会发现一条类似于生产力增长轨迹的渐进线。</p><p>但是由于我们借债，于是产生了周期，原因并不是任何法规，而是人的天性和信贷的运作方式！借债不过是提前消费，为了购买现在买不起的东西，你的支出必然超过收入。因此你需要借钱，实质上是向未来的自己借钱。你给自己设定了一个未来的时间，到那个时候你的支出必须少于收入，以便偿还债务。 这样马上就形成了一个周期。通常一旦你借钱就制造了一个周期。对于个人是这样，对于整个经济运行也是这样。这就是为什么必须理解信贷，因为信贷触发了一系列机械和可以预料的将在未来发生的事件，这就是信贷不同于货币的地方！完成交易需要使用货币，当你在酒吧用现金买一瓶啤酒时，交易立即完成。但是如果你用信用来买一瓶啤酒，比如赊账，你相当于承诺今后为这瓶啤酒付钱！你和酒吧一起创造了一笔资产和一笔负债，你们凭空制造出了信贷，只有在你今后清偿了这笔赊账之后，上述资产和负债才会消失，债务才会还清，交易才会了结。</p><p>现实生活中大部分所谓的钱实际上是信贷。美国国内的信贷总额大约为 50 万亿美元，而货币总额只有大约 3 万亿美元，不要忘记在没有信贷的经济运行中，增加支出的唯一办法是增加生产。但是在有信贷的经济运行中，还可以通过借债来增加支出。因此有信贷的经济运行能增加支出，使得收入的增长速度在短期内超过生产率的增长，但在长期内并非如此。但是请不要误解我的意思，信贷不一定是坏事，只是会导致周期性变化。信贷如果造成超过偿还能力的过度消费就是不良信贷;但是现在如果高效率地分配资源和产生收入，让你能偿还债务就是良性信贷。例如如果你借钱买一台大彩电，电视机不会带来任何收入，但是需要你偿还债务；但是你如果借钱买一台拖拉机，用它来收获更多的庄稼，赚更多的钱，你就能够偿还债务，提高生活水平。</p><p>在有现代的经济运行中，我们可以跟踪各种交易，观察信贷如何带来经济增长。我举一个例子，假设你每年挣 10 万美元，没有任何债务，你有不错的信用可以借 1 万美元。例如用信用卡借。因此你每年可以花 11 万美元，即使你的收入只有 10 万美元。由于你的支出是别人的收入，另一个人因此挣了 11 万美元。这个挣了 11 万美元的人，如果没有任何债务，可以借 1.1 万美元。他可以消费 12.1 万美元，即使他的年收入只有 11 万美元。由于他的支出是另一个人的收入，而我们通过跟踪各种交易，可以看到这个过程，不断自我强化。</p><h3 id="短期债务周期"><a href="#短期债务周期" class="headerlink" title="短期债务周期"></a>短期债务周期</h3><p>但不要忘记借债形成周期，周期会上升，最终也会下降。下面我们谈谈短期债务周期。随着经济活动的增加，出现了扩张，这是短期债务周期的第一阶段。支出继续增加，价格开始上涨，这里导致支出增加的是信贷，而信贷可以即刻凭空产生。如果支出和收入的增长速度超过所出售的商品的生产速度，价格就会上涨。我们把价格的上涨称为通货膨胀。央行不希望通货膨胀过高，因为这会导致许多问题。央行在看到价格上涨时就会提高利率。随着利率的上升，有能力借钱的人会减少，同时现有的债务成本也会上升，就等于你每个月的信用卡还款额会增加。由于人们减少借债、还款额度增长，剩下来用于支出的资金将减少，因此支出速度放慢。而由于一个人的支出是另一个人的收入，环环相扣，人们的收入将下降。由于支出减少，价格将下跌，我们称之为通货紧缩。经济活动减少，经济便进入衰退。如果衰退过于严重，而且通货膨胀不再成为问题，央行将降低利率，使经济活动重新加速。随着利率降低，偿债成本下降，借债和支出增加，出现另一次经济扩张，可见经济像一部机器一样运行。在短期债务周期中限制支出的唯一因素是贷款人和借款人的贷款和借款意愿。</p><h3 id="长期债务周期"><a href="#长期债务周期" class="headerlink" title="长期债务周期"></a>长期债务周期</h3><p>如果信贷易于获得，经济就会扩张。如果信贷不易获得，经济就会衰退。请注意这个周期主要由央行控制。短期债务周期通常持续 5-8 年，在几十年里不断重复。但是请注意在每个周期的低谷和高峰后，经济增长和债务都超过前一个周期。为什么会这样？这是人促成的。人具有借更多钱和花更多钱的倾向，而不喜欢偿还债务。这是人的天性。因此在长期内债务增加的速度超过收入，从而形成长期债务周期。尽管人们的债务增加，但贷款人会提供更宽松的信贷条件。</p><p>这是为什么？这是因为大家都以为形势一片大好，人们仅注意最近出现的情况。最近的情况是什么？收入一直在增加，资产价值不断上升，股票市场欣欣向荣，现在是繁荣时期——用借来的钱购买商品服务和金融资产很划算。当人们过度借贷消费使泡沫便产生了。因此尽管债务一直增加，但收入也以相进的速度增加，从而抵消了债务！我们把债务与收入比率称为债务负担。只要收入继续上升，债务负担就可以承受。与此同时，资产价值迅猛上升，人们大量借钱来购买资产，因为投资促使资产价格日益升高，人们感觉自己很富有。因此尽管积累了大量债务，收入和资产价值的上升，帮助借贷人在长期内保持良好的信用度。但是这种情况显然无法永久持续下去，也确实没有持续下去。几十年来债务负担缓慢增加，使偿贷成本越来越高，到了一定的时候，偿债成本的增加速度超过收入，迫使人们削减支出。由于一个人的支出是另一个人的收入，收入开始下降。人们的信用因此降低，致使借贷减少，偿债成本继续增加，使得支出进一步减少，周期开始逆转，这时到达长期债务的顶峰，债务负担变得过重。</p><p>美国欧洲和世界上很多其他地区在 2008 年即发生了这一情况，日本在 1989 年和美国在 1929 年因同样原因发生了这一情况。现在经济进入去杠杆化时期，在去杠杆化过程中，人们削减支出、收入下降、信贷消失、资产价格下跌、银行发生挤兑、股票市场暴跌、社会紧张加剧，整个过程开始下滑并形成恶性循环。随着收入下降和偿债成本增加，借款人倍感拮据。随着信用消失信贷枯竭，借款人再也无法借到足够的钱来偿还债务。借款人竭力填补这个窟窿，不得不在支出下降的同时出售资产。出售热潮使市场充斥待售资产，这时股票市场暴跌，不动产市场一蹶不振，银行陷入困境。随着资产价格下跌，借款人能够提供抵押物的价值下降，这进一步降低了借款人的信用，人们觉得自己很穷。信贷迅速消失，支出减少，收入减少，财富减少，信贷减少借债等等随之减少，这是一个恶性循环。</p><p>它看起来与衰退相似，但不同之处是无法通过降低利率来挽回局面。在衰退中可以通过降低利率来刺激借贷，但是在去杠杆化过程中，由于利率已经很低接近零，从而丧失刺激功能，因此降低利率不起作用。美国国内的利率在 1930 年代的去杠杆化期间下降到零，在 2008 年也是如此。衰退与去杠杆化之间的差别在于，在去杠杆化过程中，借款人的债务负担变得过重，无法通过降低利率来减轻。贷款人意识到债务过于庞大，根本无法足额偿还。借款人失去了偿债能力，其抵押物失去价值，他们觉得受到债务的极大伤害，不想再借入更多债务。贷款人停止放贷，借款人停止借贷，整个经济体与个人一样都失去了信用度。</p><h3 id="去杠杆化的手段"><a href="#去杠杆化的手段" class="headerlink" title="去杠杆化的手段"></a>去杠杆化的手段</h3><p>那么应该怎样应对去杠杆化？问题在于债务负担过重，必须减轻。为此可以采用四种办法：一，个人企业和政府削减支出；二，通过债务违约和重组来减少债务；三，财富再分配，将财富从富人转给穷人；四，最后央行发行更多货币。这四种办法被用于现代历史上的每一个去杠杆化过程。</p><h4 id="削减支出，共克时艰"><a href="#削减支出，共克时艰" class="headerlink" title="削减支出，共克时艰"></a>削减支出，共克时艰</h4><p>通常第一个措施是削减支出，我们刚才看到个人企业银行和政府都勒紧裤带削减支出，从而能够减少债务。我们经常把这称为紧缩。当借款人不再借入新的债务，并开始减少旧债务的时候，你会以为债务负担会减轻。但情况正好相反，支出减少了，而一个人的支出是另一个人的收入，这就导致收入下降，收入下降速度超过还债的速度，因此债务负担实际上更为沉重。我们已经看到这种削减支出的做法引起通货紧缩，令人痛苦，企业不得不削减成本，这意味着工作机会减少，失业率上升，这导致下一个步骤：必须减少债务。</p><p>很多借款人无法偿还贷款，而借款人的债务是贷款人的资产。如果借款人不偿还银行贷款，人们会担心银行无法返还其存款，因此纷纷从银行取出存款，银行受到挤兑，而个人企业和银行出现债务违约。这种严重的经济收缩就是萧条。萧条的一个主要特征是人们发现他们原来以为属于自己的财富中有很大一部分实际上并不存在。我们再次以酒吧为例，当你用赊账的办法买一瓶啤酒时，是在承诺今后偿还酒吧的赊账，你的承诺成为酒吧的一项资产。但是如果你不兑现承诺，不偿还酒吧的赊账，实际上是债务违约，那么酒吧的这项资产实际上一钱不值，它实际上是消失了。</p><h4 id="债务重组"><a href="#债务重组" class="headerlink" title="债务重组"></a>债务重组</h4><p>很多贷款人不希望自己的资产消失，同意债务重组。债务重组意味着贷款人得到的还款减少或偿还期延长，或利率低于当初商定的水平。无论如何合约被破坏，结果是债务减少，贷款人希望多少收回一些贷款，这强过血本无归。债务重组让债务消失，但由于它导致收入和资产价值以更快的速度消失，债务负担继续日趋沉重。削减债务与减少支出一样，令人痛苦和导致通货紧缩。所有这些都对中央政府产生影响。因为收入降低和就业减少意味着政府的税收减少。</p><h4 id="财富再分配"><a href="#财富再分配" class="headerlink" title="财富再分配"></a>财富再分配</h4><p>与此同时由于失业率上升，中央政府需要增加支出：很多失业者储蓄不足，需要政府的财务支持；此外政府制定刺激计划和增加支出，以弥补经济活动的减少。在去杠杆化过程中，政府的预算赤字飙升，原因是政府的支出超过税收。你在新闻中所听到的预算赤字正是这种情况。政府必须加税或者举债，以填补赤字。但是在收入下降和很多人失业的时候，应该向谁融资呢？由于政府需要更多的钱，而且大量财富集中在少数人手中，政府自然而然地增加对富人的征税，以帮助经济中的财富再分配，把财富从富人那里，转给穷人。</p><h4 id="发行货币，量化宽松"><a href="#发行货币，量化宽松" class="headerlink" title="发行货币，量化宽松"></a>发行货币，量化宽松</h4><p>正在困苦当中的穷人开始怨恨富人，承受经济疲弱资产贬值和增税压力的富人开始怨恨穷人。如果萧条继续下去就会爆发社会动荡！不仅国家内部的紧张加剧，而且国家之间也会这样，债务国和债权国之间尤其如此。这种局势可以导致政治变革，有时是极端的变革，1930 年代这种局势导致希特勒掌权，欧洲爆发战争和美国的大萧条。要求采取行动来结束萧条的压力越来越大，不要忘记人们心目中的货币，实际上大部分是信贷！因此信贷一旦消失，人们的钱会不够花，人们迫切需要钱，而你一定记得谁可以发行货币，中央银行可以。</p><p>央行已经把利率降到接近零的水平，现在不得不发行更多货币。发行货币与削减支出、减少债务和财富再分配不同，会引起通货膨胀和刺激经济。中央银行不可避免的凭空发行更多货币，并使用这些货币来购买金融资产和政府债券。这种情况发生在美国大萧条期间，并于 2008 年再次爆发。当时美国的中央银行及联邦储备委员会增加发行了 2 万多亿美元，世界各地能够这样做的其他央行也增发了很多货币。央行通过用这些货币购买金融资产，帮助推升了资产价格，从而提高了人们的信用。但是这仅仅有助于那些拥有金融资产的人。你看央行可以发行货币，但是只能购买金融资产。而另一方面，中央政府可以购买商品和服务，可以向人民送钱，但是无法印钞票。因此为了刺激经济，央行和政府必须合作。央行通过购买政府债券，其实是把钱借给政府，使其能够运行赤字预算，并通过刺激计划和失业救济金来增加购买商品和服务的支出。这增加了人们的收入，也增加了政府的债务。但是这个办法将降低经济中的总债务负担，这是一个风险很大的时刻。</p><p>有人问发行货币是否会加剧通货膨胀，如果增发的货币抵消信贷的降幅，就不会引发通货膨胀。不要忘记重要的是支出，每一块钱的支出，无论支付的是货币还是信用，对价格的影响都是一样的。央行可以通过增加货币发行量来弥补消失的信贷。央行为了扭转局面，不仅需要推动收入的增长，而且需要让收入的增长率超过所积累债务的利率，这是什么意思？主要的意思是收入一定要比债务增长的快。例如我们假设有个国家正在经历去杠杆化，其债务收入比率是100%，这意味着债务量相当于整个国家一年的收入。假设这些债务的利率是2%，如果债务以2%的利率速度增加，而收入的增长率仅有大约1%，那么债务负担永远不会减轻，必须发行更多货币，使收入增长率超过利率。然而发行货币太容易了，而且比其他办法受欢迎，因此这个办法可能易于被滥用。关键是避免像1920年代去杠杆化的德国那样发行过多的货币，从而导致恶性通货膨胀。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>决策者需要平衡考虑降低债务负担的四种办法，必须平衡兼顾通货紧缩的办法和通货膨胀的办法，以便保持稳定。如果取成适当的平衡，就可以带来和谐的去杠杆化。所以说去杠杆化可以是痛苦的，也可以是和谐的！怎样才能实现和谐的去杠杆化？尽管去杠杆化是艰难的，但以尽可能好的办法来处理艰难的局势却是一件好事，这比杠杆化阶段大量举债产生过度失衡现象要好得多。在和谐的去杠杆化过程中，债务收入比率下降，经济实际上是正增长；同时通货膨胀并不是一个问题，这是通过适当的平衡所取得的。为了取得适当的平衡，需要结合削减支出、减少债务转移财富和发行货币的办法，以保持经济和社会稳定。</p><p>如果决策层取得适当的平衡，去杠杆化过程就不会那样激烈，经济增长速度缓慢，但债务负担会下降，这就是和谐的去杠杆化，当收入上升的时候，借款人的信用度提高，借款人一旦显得更有信用，贷款人就会开始恢复贷款，债务负担终于开始下降，人们可以借到钱就可以增加消费经济终于开始恢复增长长期债务周期，从而进入通货再膨胀阶段去杠杆化过程如果处理不当会非常可怕，但如果处理得当，最终将解决问题！为了使债务负担下降和经济活动恢复正常，大约需要十年或更长的时间，因此有失去的十年这种说法。综上所述，经济当然要比这个模式复杂一点。然而把短期债务周期长期债务周期和生产率增长轨迹结合起来分析，我们会得到一个不错的模式，可以看清我们在过去和当前的处境，以及未来可能的发展方向。</p><h2 id="忠告"><a href="#忠告" class="headerlink" title="忠告"></a>忠告</h2><p>最后我希望大家学到三条经验法则。第一，不要让债务的增长速度超过收入，因为债务负担最终将把你压垮。第二，不要让收入的增长速度超过生产率，因为这最终将使你失去竞争力。第三，尽一切努力提高生产率，因为生产率在长期内起着最关键的作用。这就是我给大家，也是给决策者们的简单的建议。大家也许会吃惊地发现，大多数人包括大多数决策者都没有对此予以足够的重视。这个模式对我很有用，希望他也将对你们有用。谢谢大家。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是对&lt;a href=&quot;https://open.163.com/movie/2016/6/I/Q/MBPO9ED98_MBPO9S8IQ.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;经济机器是怎样运行的&lt;/a&gt;的整理和再创作。感谢原作者 Ray Dalio。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经济虽然可能看起来复杂，但是其实是以简单和机械的方式运行的。经济有几个简单的零部件和无数次重复的简单交易组成，这些交易首先是由人的天性所驱动，因而形成三股主要的经济动力：一，生产率的提高；二，短期债务周期；三，长期债务周期。&lt;/p&gt;
&lt;p&gt;下面我们谈一下这三股动力，并介绍如何把它们组合在一起，得出一个良好的模型，便于我们跟踪经济走势并理解当前正在发生的事情。&lt;/p&gt;
    
    </summary>
    
      <category term="Economics and Investment" scheme="https://liam.page/categories/Economics-and-Investment/"/>
    
    
      <category term="Ray Dalio" scheme="https://liam.page/tags/Ray-Dalio/"/>
    
      <category term="Economics" scheme="https://liam.page/tags/Economics/"/>
    
  </entry>
  
  <entry>
    <title>管理 macOS 系统上的启动项</title>
    <link href="https://liam.page/2019/01/16/manage-daemons-and-agents-on-macOS/"/>
    <id>https://liam.page/2019/01/16/manage-daemons-and-agents-on-macOS/</id>
    <published>2019-01-16T02:20:42.000Z</published>
    <updated>2019-01-25T03:17:15.970Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 Mac 上安装了一些软件。重启后发现这些软件会随开机启动。我不喜欢这样，所以想禁止这些启动项。</p><p>在中文网络搜索，大多数内容都是在系统偏好设置中，在账户和群组里管理「登录项」。但是目标软件没有出现在登录项的列表中。为此，我不得不在英文网络上搜索，找到了 Apple 关于开发者的一些文档，最终解决了问题。</p><p>这篇记录一下如何管理 macOS 系统上的启动项。</p><a id="more"></a><h2 id="守护进程与用户代理"><a href="#守护进程与用户代理" class="headerlink" title="守护进程与用户代理"></a>守护进程与用户代理</h2><p>启动项的专业称呼是守护进程（Daemon）。守护进程是计算机系统中，运行在后台的程序。在 *nix 系统中，守护进程通常没有父进程（让自己成为孤儿进程，<a href="/2016/09/25/review-of-envoy/#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BB%88%E6%AD%A2">前作</a>中有相关讨论）。一般来说，守护进程完成监听而后作出响应的任务。举例来说，杀毒软件的守护进程监听到有新下载的文件，就给出响应——启动杀毒软件对新下载的文件进行安全扫描。</p><p>通常来说，守护进程是系统启动及内核运行后在系统初始化阶段启动的进程。对于 macOS 来说，还有名为用户代理（User Agent）的守护进程类似物。与守护进程相同，用户代理也能实现上述监听而后作出响应的功能。不过，与守护进程不同的是，用户代理是在用户登录系统时启动的，而不是在系统初始化阶段启动的。不过，就本文而言，守护进程与用户代理是一回事，因此除有特殊注明外，一律以守护进程指代，不做区分。</p><h2 id="launchd"><a href="#launchd" class="headerlink" title="launchd"></a><code>launchd</code></h2><p>在 macOS 上，Apple 推荐用 <code>launchd</code> 来启动守护进程与用户代理。具体来说，<code>launchd</code> 在系统启动及内和运行后，在系统初始化阶段启动守护进程，而在用户登录是启动用户代理。流程大致如下：</p><ol><li>读入属性列表文件（property list files）</li><li>注册守护进程所需的套接字（sockets）和文件描述符（file descriptors）</li><li>启动要求在任何情况下持续运行的守护进程</li><li>对于按需启动的守护进程，在 <code>launchd</code> 收到相应请求时，启动对应的守护进程</li><li>当关机（对于守护进程）或用户登出（对于用户代理）时，<code>launchd</code> 对这些守护进程发出 <code>SIGTERM</code> 信号</li></ol><p>其中，对于守护进程，其属性列表文件在以下目录中：</p><ul><li><code>/System/Library/LaunchDaemons/</code></li><li><code>/Library/LaunchDaemons/</code></li></ul><p>对于用户代理，其属性列表文件在以下目录中：</p><ul><li><code>/System/Library/LaunchAgents</code></li><li><code>/Library/LaunchAgents</code></li><li><code>~/Library/LaunchAgents</code></li></ul><p>这里，由于 <code>launchd</code> 提前为所有守护进程注册好了套接字及文件描述符，因而守护进程可以在任何时候按需启动。如果 <code>launchd</code> 监听到系统中有其他进程向某一守护进程发出请求，但该守护进程尚未启动；则发出请求的进程会被暂停，直到 <code>luanchd</code> 启动相应的守护进程并对请求作出响应为止。此外，若在一段时间内守护进程没有收到任何请求，则守护进程可以自行退出。<code>launchd</code> 会记录这种退出，并在将来有请求到来时再启动相应的守护进程。</p><h2 id="属性列表文件（property-list-files）"><a href="#属性列表文件（property-list-files）" class="headerlink" title="属性列表文件（property list files）"></a>属性列表文件（property list files）</h2><p>上一节提到，<code>launchd</code> 会去相应目录读取属性列表文件，然后根据属性列表文件中的参数，注册套接字和文件描述符等资源，以及控制守护进程的运行策略。因此，接下来的关键就是这类属性列表文件。</p><p>属性列表文件的英文是 Property List files，对应的文件名后缀是 <code>.plist</code>。说是属性列表文件，其实本质上就是 XML 文件。以下是一个示例文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.example.hello<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>world<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Apple 在<a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html#//apple_ref/doc/uid/10000172i-SW7-104142-BCICCCFI" target="_blank" rel="noopener">文档里</a>给出了守护进程属性列表文件必选和推荐的字段，这里翻译如下。</p><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td><code>Label</code></td><td>必填；包含用于 <code>launchd</code> 识别守护进程的唯一字符串标识符。</td></tr><tr><td><code>ProgramArguments</code></td><td>必填；包含用于 <code>launchd</code> 启动守护进程时使用的参数。</td></tr><tr><td><code>inetdCompatibility</code></td><td>表示该守护进程对于每个传入的连接启用相互独立的实例。该关键字会让 <code>launchd</code> 像 <code>inetd</code> 那样运作；具体来说，<code>launchd</code> 会将与每个传入连接的客户端建立好的套接字传给相互独立的守护进程实例。</td></tr><tr><td><code>KeepAlive</code></td><td>该关键字用于指定相应的守护进程是按需启动还是要一直启动着。Apple 推荐实现按需启动的守护进程。</td></tr></tbody></table><p>此外，Apple 在<a href="https://developer.apple.com/library/archive/technotes/tn2083/_index.html" target="_blank" rel="noopener">技术笔记</a>中还提及了其他两个关键字，这两个关键字也可能影响守护进程的运行策略（当然还有其他一些关键字可能影响，但主要还有这两个）：</p><ul><li><code>RunAtLoad</code>：在属性列表文件加载时启动守护进程；</li><li><code>SuccessfulExit</code>：与 <code>KeepAlive</code> 联合使用。当 <code>SuccessfulExit = true</code> 时表示若进程正常退出（<code>Exit at 0</code>），则 <code>launchd</code> 应当尝试将其重启；当 <code>SuccessfulExit = false</code> 时表示若进程异常退出，则 <code>launchd</code> 应当尝试将其重启。</li></ul><p>因此我们可以构建一些场景：</p><table><thead><tr><th>预期的行为</th><th>相应的属性配置</th></tr></thead><tbody><tr><td>完全地按需启动</td><td><code>KeepAlive = false; RunAtLoad = false</code></td></tr><tr><td>在属性列表文件加载时启动，而后按需启动</td><td><code>KeepAlive = false; RunAtLoad = true</code></td></tr><tr><td>在守护进程异常退出之前，按需启动</td><td><code>KeepAlive = { SuccessfulExit = false }; RunAtLoad = false</code></td></tr><tr><td>在守护进程正常退出之前，按需启动</td><td><code>KeepAlive = { SuccessfulExit = true }; RunAtLoad = false</code></td></tr></tbody></table><h2 id="管理启动项"><a href="#管理启动项" class="headerlink" title="管理启动项"></a>管理启动项</h2><p>有了这些知识，管理 macOS 上的启动项就很容易了。你需要做的就是在上述 5 个目录下，找到相应程序的属性列表文件，而后按你的意图修改即可。当然，有些属性列表文件需要使用 <code>root</code> 权限来修改。有必要的话，你需要在终端（Terminal.app）当中使用 <code>sudo vim /path/to/your.plist</code> 来修改目标文件。</p><p>唯有一点需要注意，在做任何修改之前<strong>做好备份</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在 Mac 上安装了一些软件。重启后发现这些软件会随开机启动。我不喜欢这样，所以想禁止这些启动项。&lt;/p&gt;
&lt;p&gt;在中文网络搜索，大多数内容都是在系统偏好设置中，在账户和群组里管理「登录项」。但是目标软件没有出现在登录项的列表中。为此，我不得不在英文网络上搜索，找到了 Apple 关于开发者的一些文档，最终解决了问题。&lt;/p&gt;
&lt;p&gt;这篇记录一下如何管理 macOS 系统上的启动项。&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Skills" scheme="https://liam.page/categories/Computer-Skills/"/>
    
    
      <category term="macOS" scheme="https://liam.page/tags/macOS/"/>
    
      <category term="Daemons" scheme="https://liam.page/tags/Daemons/"/>
    
      <category term="Agents" scheme="https://liam.page/tags/Agents/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中虚函数的声明与定义</title>
    <link href="https://liam.page/2019/01/13/virtual-member-function-declaration-and-definition-in-Cxx/"/>
    <id>https://liam.page/2019/01/13/virtual-member-function-declaration-and-definition-in-Cxx/</id>
    <published>2019-01-13T10:01:18.000Z</published>
    <updated>2019-01-25T03:17:15.962Z</updated>
    
    <content type="html"><![CDATA[<p>多态（Polymorphism）是面向对象程序设计最重要的特性之一。C++ 通过结合虚函数和指针（引用）来实现多态。作为 C++ 用户，你当然知道如何将虚函数和指针（引用）结合起来以实现多态。但在这些概念之间，可能还存在些许模糊地带。例如说，你有思考过下面这个问题吗？</p><blockquote><p>纯虚函数能有实现吗？</p></blockquote><p>此篇讨论 C++ 中虚函数的声明与定义。</p><a id="more"></a><h2 id="直接回答问题"><a href="#直接回答问题" class="headerlink" title="直接回答问题"></a>直接回答问题</h2><p>能！纯虚函数可以有定义，并且有时我们必须给出纯虚函数的定义。不过有一点需要注意：和其它成员函数不同，纯虚函数的定义必须实现在类定义之外。（见下例）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Abstract</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// pure virtual</span></span><br><span class="line">    ~Abstract() &#123;</span><br><span class="line">        <span class="comment">// f(); // undefined behavior</span></span><br><span class="line">        Abstract::f(); <span class="comment">// OK: non-virtual call</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// definition of the pure virtual function</span></span><br><span class="line"><span class="keyword">void</span> Abstract::f() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A::f()\n"</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Concrete</span> :</span> Abstract &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        Abstract::f(); <span class="comment">// OK: calls pure virtual function</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~Concrete() &#123;</span><br><span class="line">        f(); <span class="comment">// OK: calls Concrete::f()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="虚成员函数"><a href="#虚成员函数" class="headerlink" title="虚成员函数"></a>虚成员函数</h2><p>我们首先来看看关于虚成员函数生命和定义的一些规则。根据 C++ 标准，虚成员函数应在类定义中生命，且必须有定义（实现）。注意，在类定义外实现虚成员函数时，不能再加 <code>virtual</code> 关键字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;  <span class="comment">// declare and define at the same time, inside the class definition.</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Foo::foo()"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bar</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Bar::bar() &#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Bar::bar()"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，C++ 标准没有要求必须在编译期对这条规则进行诊断。也就是说，如果没有给出虚成员函数的实现，编译器可能不会报错。不过，链接器可能会提示引用了未定义的符号这样的错误。</p><h2 id="纯虚成员函数"><a href="#纯虚成员函数" class="headerlink" title="纯虚成员函数"></a>纯虚成员函数</h2><p>纯虚函数使类成为「抽象类」。具体来说，我们不能创建抽象类类型的对象，也不能将其作为函数的参数类型、返回类型，也不能作为显式类型转换的目标类型。</p><p>因此，我们永远不会有机会调用抽象类中的徐成员函数。另一方面，纯虚函数必然会在派生类中被复写。因此，在大多数情况下，纯虚函数的实现是没什么用处的。也因此，我们可以将一个成员函数声明为纯虚的，但是不给它的定义。</p><p>也就是说，对于纯虚函数，我们可以：</p><ul><li>在类定义中声明纯虚函数，并且不给实现；</li><li>在类定义中声明纯虚函数，并且在类定义之外给出实现。</li></ul><p>不过，这里有两处例外：</p><ol><li>对于纯虚析构函数，必须提供实现。</li><li>派生类中的成员函数可以调用抽象类中的纯虚函数，但必须加上抽象类的限定符（<code>Base::some_pure_virtual_function()</code>）。</li></ol><p>在这两种情况下，提供纯虚函数的定义是有意义的——也必须提供。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多态（Polymorphism）是面向对象程序设计最重要的特性之一。C++ 通过结合虚函数和指针（引用）来实现多态。作为 C++ 用户，你当然知道如何将虚函数和指针（引用）结合起来以实现多态。但在这些概念之间，可能还存在些许模糊地带。例如说，你有思考过下面这个问题吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;纯虚函数能有实现吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此篇讨论 C++ 中虚函数的声明与定义。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm and Computer Science" scheme="https://liam.page/categories/Algorithm-and-Computer-Science/"/>
    
    
      <category term="C++" scheme="https://liam.page/tags/C/"/>
    
      <category term="Virtual Member Function" scheme="https://liam.page/tags/Virtual-Member-Function/"/>
    
  </entry>
  
  <entry>
    <title>2018 个税新法计征算法及 Excel 个税计算器</title>
    <link href="https://liam.page/2019/01/04/Excel-Personal-Income-Tax-Calculator/"/>
    <id>https://liam.page/2019/01/04/Excel-Personal-Income-Tax-Calculator/</id>
    <published>2019-01-04T01:43:06.000Z</published>
    <updated>2019-01-25T03:17:15.954Z</updated>
    
    <content type="html"><![CDATA[<p>2018 年颁布的个税新法于 2019 年 1 月 1 日起施行。个税新法的个税计征办法，相较个税旧法的改变主要有以下几个：</p><ul><li>计征周期发生变化：旧法按月计征工资和薪金的个税；新法按年计征工资和薪金的个税，按月预缴。</li><li>起征点发生变化：旧法按月计征个税的起征点是 ¥3,500.00；新法按月预缴个税的起征点是 ¥5,000.00。</li><li>计算应纳税所得额时，增加专项附加扣除：新法在子女教育、继续教育、大病医疗、（首套）住房贷款利息、住房租金、赡养老人等六个方面新增了专项附加扣除。</li></ul><p>此外，按个税新法，个税旧法中全年一次性奖金收入（年终奖即属此类）的优惠将被取消，全年一次性奖金收入也将纳入全年累计收入进行个税计征。不过，按财政部税务总局发布的<a href="http://www.chinatax.gov.cn/n810341/n810755/c3978994/content.html" target="_blank" rel="noopener">通知（关于个人所得税法修改后有关优惠政策衔接问题的通知，财税（2018）164 号）</a>，个税旧法中的优惠政策将在一定程度上延续至 2022 年 1 月 1 日。</p><p>对于我等升斗小民，赚点钱真的不容易。个税改革的细节又很多，想想就脑壳疼。为此，我将个税新法的计征办法归纳总结了一下，形成此文。此外，我制作了一个 Excel 表格（后附），大家可据此自行计算。若有不正确的地方，欢迎指正。</p><a id="more"></a><h2 id="月收入"><a href="#月收入" class="headerlink" title="月收入"></a>月收入</h2><h3 id="应纳税所得额"><a href="#应纳税所得额" class="headerlink" title="应纳税所得额"></a>应纳税所得额</h3><p>计征个税的第一步，是计算当月应纳税所得额。它的公式如下：</p><p><code>$$\text{月应纳税所得额} = \text{当月税前收入} - \text{起征点} - \text{三险一金（五险一金个人缴存部分）减除} - \text{专项附加扣除}.$$</code></p><p>举例来说，某人某月的税前收入是 ¥30,000.00，三险一金减除额是 ¥4,500.00，个税新法下专项附加扣除总额是 ¥2,000.00，则其该月应纳税所得额是</p><p><code>$$\begin{aligned}\text{月应纳税所得额} &amp;{}= \text{当月税前收入} - \text{起征点} - \text{三险一金（五险一金个人缴存部分）减除} - \text{专项附加扣除}\\&amp;{} = ¥30,000.00 - ¥5,000.00 - ¥4,500.00 - ¥2,000.00 \\&amp;{} = ¥18,500.00\end{aligned}$$</code></p><h3 id="当年累计应纳税所得额"><a href="#当年累计应纳税所得额" class="headerlink" title="当年累计应纳税所得额"></a>当年累计应纳税所得额</h3><p>计征个税的第二步，是计算当年累计应纳税所得额。它的公式如下：</p><p><code>$$ \text{当年累计应纳税所得额}_k = \sum_{i = 1}^{k} \text{月应纳税所得额}_i. $$</code></p><p>续上例。当年一月、二月，该人税前月收入是 ¥30,000.00，三月起，他的税前月收入增长到 ¥35,000.00。则其一月、二月的月应纳税所得额是 ¥18,500.00，三月起的月应纳税所得额是 ¥23,500.00。于是，截至四月，他当年的累计应纳税所得额是</p><p><code>$$\begin{aligned}\text{当年累计应纳税所得额}_4 &amp;{}= \sum_{i = 1}^{4} \text{月应纳税所得额}_i \\&amp;{}= ¥18,500.00 + ¥18,500.00 + ¥23,500.00 +　¥23,500.00 \\&amp;{}= ¥84,000.00\end{aligned}$$</code></p><h3 id="当年累计应预缴税额"><a href="#当年累计应预缴税额" class="headerlink" title="当年累计应预缴税额"></a>当年累计应预缴税额</h3><p>计征个税的第三步，是计算当年累计应预缴税额。它的公式如下：</p><p><code>$$ \text{当年累计应预缴税额}_k = \text{当年累计应纳税所得额}_k * \text{适用税率} - \text{适用速算扣除数}. $$</code></p><p>其中，适用税率和适用速算扣除数取决于当年累计应纳税所得额。对应关系如下表。</p><table><thead><tr><th>级数</th><th>累计预扣预缴应纳税所得额</th><th>预扣率（%）</th><th>速算扣除数</th></tr></thead><tbody><tr><td>1</td><td>不超过 36000 元的部分</td><td>3</td><td>0</td></tr><tr><td>2</td><td>超过 36000 元至 144000 元的部分</td><td>10</td><td>2520</td></tr><tr><td>3</td><td>超过 144000 元至 300000 元的部分</td><td>20</td><td>16920</td></tr><tr><td>4</td><td>超过 300000 元至 420000 元的部分</td><td>25</td><td>31920</td></tr><tr><td>5</td><td>超过 420000 元至 660000 元的部分</td><td>30</td><td>52920</td></tr><tr><td>6</td><td>超过 660000 元至 960000 元的部分</td><td>35</td><td>85920</td></tr><tr><td>7</td><td>超过 960000 元的部分</td><td>45</td><td>181920</td></tr></tbody></table><p>续上例。截至四月，他当年的累计应预缴税额是：</p><p><code>$$\begin{aligned}\text{当年累计应预缴税额}_4 &amp;{}= \text{当年累计应纳税所得额}_4 * \text{适用税率} - \text{适用速算扣除数} \\&amp;{}= ¥84,000.00 * 10\% - ¥2,520.00 \\&amp;{}= ¥8,230.00\end{aligned}$$</code></p><h3 id="当月应预缴税额"><a href="#当月应预缴税额" class="headerlink" title="当月应预缴税额"></a>当月应预缴税额</h3><p>计征个税的第四步，是计算当月应预缴税额。它的公式如下：</p><p><code>$$ \text{月应预缴税额}_k = \text{当年累计应预缴税额}_k - \text{当年累计实际已预缴税额}_{k - 1}. $$</code></p><p>因此，续上例，该人前 4 个月每个月的应预缴税额如下表。</p><table><thead><tr><th>月份</th><th>当年累计应预缴税额</th><th>当年累计实际已预缴税额</th><th>当月应预缴税额</th></tr></thead><tbody><tr><td>一月</td><td>¥555.00</td><td>¥0</td><td>¥555.00</td></tr><tr><td>二月</td><td>¥1,180.00</td><td>¥555.00</td><td>¥625.00</td></tr><tr><td>三月</td><td>¥3,530.00</td><td>¥1,180.00</td><td>¥2,350.00</td></tr><tr><td>四月</td><td>¥5,880.00</td><td>¥3,530.00</td><td>¥2,350.00</td></tr></tbody></table><p>由此可见，在年应纳税收入累计升高到新的级数时，从该月开始，月应预缴税额会相应升高。</p><h3 id="当月税后收入"><a href="#当月税后收入" class="headerlink" title="当月税后收入"></a>当月税后收入</h3><p>计征个税完成后，我们就能计算实际税后收入了。它的公式如下：</p><p><code>$$ \text{月税后收入}_k = \text{月税前收入}_k - \text{三险一金（五险一金个人缴存部分）}_k - \text{月应预缴税额}_k. $$</code></p><p>因此，续上例，该人前 4 个月每个月的税后收入如下表。</p><table><thead><tr><th>月份</th><th>税前收入</th><th>三险一金（五险一金个人缴存部分）</th><th>月应预缴税额</th><th>月税后收入</th></tr></thead><tbody><tr><td>一月</td><td>¥30,000.00</td><td>¥4,500.00</td><td>¥555.00</td><td>¥24,945.00</td></tr><tr><td>二月</td><td>¥30,000.00</td><td>¥4,500.00</td><td>¥625.00</td><td>¥24,875.00</td></tr><tr><td>三月</td><td>¥35,000.00</td><td>¥4,500.00</td><td>¥2,350.00</td><td>¥23,150.00</td></tr><tr><td>四月</td><td>¥35,000.00</td><td>¥4,500.00</td><td>¥2,350.00</td><td>¥23,150.00</td></tr></tbody></table><p>由此可见，在年应纳税收入累计升高到新的级数时，从该月开始，由于月应预缴税额会相应升高，实际月税后收入会相应下降。</p><h2 id="全年一次性奖金"><a href="#全年一次性奖金" class="headerlink" title="全年一次性奖金"></a>全年一次性奖金</h2><p>按上述「通知」</p><blockquote><p>　居民个人取得全年一次性奖金，符合《国家税务总局关于调整个人取得全年一次性奖金等计算征收个人所得税方法问题的通知》（国税发〔2005〕9号）规定的，在2021年12月31日前，不并入当年综合所得，以全年一次性奖金收入除以12个月得到的数额，按照本通知所附按月换算后的综合所得税率表（以下简称月度税率表），确定适用税率和速算扣除数，单独计算纳税。<br><code>$$ \text{应纳税额}_k = \text{全年一次性奖金收入} * \text{适用税率} - \text{速算扣除数}. $$</code></p></blockquote><p>其中月度税率表如下。</p><table><thead><tr><th>级数</th><th>全月应纳税所得额</th><th>税率（%）</th><th>速算扣除数</th></tr></thead><tbody><tr><td>1</td><td>不超过 3000 元的</td><td>3</td><td>0</td></tr><tr><td>2</td><td>超过 3000 元至 12000 元的部分</td><td>10</td><td>210</td></tr><tr><td>3</td><td>超过 12000 元至 25000 元的部分</td><td>20</td><td>1410</td></tr><tr><td>4</td><td>超过 25000 元至 35000 元的部分</td><td>25</td><td>2660</td></tr><tr><td>5</td><td>超过 35000 元至 55000 元的部分</td><td>30</td><td>4410</td></tr><tr><td>6</td><td>超过 55000 元至 80000 元的部分</td><td>35</td><td>7160</td></tr><tr><td>7</td><td>超过 80000 元的部分</td><td>45</td><td>1516</td></tr></tbody></table><p>举例来说，某人获得全年一次性奖金 ¥30,000.00，则其适用税率 3% 和速算扣除数 ¥0.00。因此，它的全年一次性奖金应纳税额是 ¥900.00，税后奖金收入 ¥29,100.00。</p><h2 id="Excel-版个税计算器"><a href="#Excel-版个税计算器" class="headerlink" title="Excel 版个税计算器"></a>Excel 版个税计算器</h2><p>按上述个税计征逻辑，我制作了一个 Excel 版个税计算器。你可以在这里<a href="/uploads/xlsx/personal_income_tax_2018.xlsx">下载</a>。</p><p>由于每个人的税前收入和专项附加扣除不一致，因此这两列需要按实际情况填写。此外，每个人缴存的三险一金基数及缴存比例也不一样，因此这一列也需要按实际情况填写。填写完成后，Excel 表格会自动计算出每个月应预缴的个人所得税额及实际税后收入。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018 年颁布的个税新法于 2019 年 1 月 1 日起施行。个税新法的个税计征办法，相较个税旧法的改变主要有以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计征周期发生变化：旧法按月计征工资和薪金的个税；新法按年计征工资和薪金的个税，按月预缴。&lt;/li&gt;
&lt;li&gt;起征点发生变化：旧法按月计征个税的起征点是 ¥3,500.00；新法按月预缴个税的起征点是 ¥5,000.00。&lt;/li&gt;
&lt;li&gt;计算应纳税所得额时，增加专项附加扣除：新法在子女教育、继续教育、大病医疗、（首套）住房贷款利息、住房租金、赡养老人等六个方面新增了专项附加扣除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，按个税新法，个税旧法中全年一次性奖金收入（年终奖即属此类）的优惠将被取消，全年一次性奖金收入也将纳入全年累计收入进行个税计征。不过，按财政部税务总局发布的&lt;a href=&quot;http://www.chinatax.gov.cn/n810341/n810755/c3978994/content.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;通知（关于个人所得税法修改后有关优惠政策衔接问题的通知，财税（2018）164 号）&lt;/a&gt;，个税旧法中的优惠政策将在一定程度上延续至 2022 年 1 月 1 日。&lt;/p&gt;
&lt;p&gt;对于我等升斗小民，赚点钱真的不容易。个税改革的细节又很多，想想就脑壳疼。为此，我将个税新法的计征办法归纳总结了一下，形成此文。此外，我制作了一个 Excel 表格（后附），大家可据此自行计算。若有不正确的地方，欢迎指正。&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Skills" scheme="https://liam.page/categories/Computer-Skills/"/>
    
    
      <category term="Tax" scheme="https://liam.page/tags/Tax/"/>
    
      <category term="Excel" scheme="https://liam.page/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>解决 Windows 7 上的图标异常</title>
    <link href="https://liam.page/2018/12/28/fixing-icon-missing-on-Windows-7/"/>
    <id>https://liam.page/2018/12/28/fixing-icon-missing-on-Windows-7/</id>
    <published>2018-12-28T11:53:07.000Z</published>
    <updated>2019-01-25T04:13:45.627Z</updated>
    
    <content type="html"><![CDATA[<p>话说 Windows 的小毛病是真的多。配置电脑一段时间之后，Micorsoft Word 的图标就变成了白板（如下图）。这篇文章解释这个现象是哪里出了问题，以及要如何解决。</p><a id="more"></a><p><img src="/uploads/images/computer-skills/bad_icon.png" alt=""></p><p>上图即是又遇见的奇怪的图标——咦，为什么要说又。看见它就很不爽对吧？</p><p>Windows 对不同文件类型/文件的图标是有一个图标缓存的。这个缓存的文件名叫做 <code>IconCache.db</code>。如果缓存中存在这个文件类型/文件的图标，就会以缓存中的图标来标示文件类型/文件；如果缓存中不存在，则从原始路径去读取图标资源。</p><p>问题就处在这个 <code>IconCache.db</code> 上。它可能被各种奇怪的操作修改、破坏。如果它被修改破坏了，那么我们看到的图标就会有异常。</p><p>解决问题的办法也很简单——删掉缓存，让 Windows 重建缓存即可。以下是解决这一问题的批处理文件内容。你可以将它保存为 <code>refresh_thumbnail_cache.bat</code> 或者直接从<a href="/uploads/codes/bat/refresh_thumbnail_cache.bat">这里下载</a>，而后双击执行。执行时，Windows 资源管理器会被杀死，而后重启。因此，你可能会观察到计算机会「闪」几下。这是正常现象，无需担心。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">taskkill /f /im explorer.exe</span><br><span class="line">cd /d %userprofile%\AppData\Local</span><br><span class="line">del IconCache.db /a</span><br><span class="line">start explorer.exe</span><br><span class="line">echo done.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说 Windows 的小毛病是真的多。配置电脑一段时间之后，Micorsoft Word 的图标就变成了白板（如下图）。这篇文章解释这个现象是哪里出了问题，以及要如何解决。&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Skills" scheme="https://liam.page/categories/Computer-Skills/"/>
    
    
      <category term="Windows 7" scheme="https://liam.page/tags/Windows-7/"/>
    
      <category term="Windows" scheme="https://liam.page/tags/Windows/"/>
    
      <category term="BAT" scheme="https://liam.page/tags/BAT/"/>
    
  </entry>
  
  <entry>
    <title>禁止 Tmux 自动修改 window 的名字</title>
    <link href="https://liam.page/2018/12/13/disallow-tmux-to-rename-window/"/>
    <id>https://liam.page/2018/12/13/disallow-tmux-to-rename-window/</id>
    <published>2018-12-13T08:36:42.000Z</published>
    <updated>2019-01-25T03:17:15.937Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Tmux 也有很长时间了，基础配置一直没动，用起来也很顺手。今天在新的服务器上编译安装 Tmux 之后，使用了一段时间发现 Tmux 的 window 名字一直随着执行命令而不断变化。哪怕是强行设置了 window name 也不管用。经过一番搜索，<a href="https://stackoverflow.com/questions/6041178/keep-the-windows-name-fixed-in-tmux#comment26641702_6041178" target="_blank" rel="noopener">找到解决方案</a>。</p><a id="more"></a><p>只需将如下代码，贴近 <code>~/.tmux.conf</code> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-option -g allow-rename off</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Tmux 也有很长时间了，基础配置一直没动，用起来也很顺手。今天在新的服务器上编译安装 Tmux 之后，使用了一段时间发现 Tmux 的 window 名字一直随着执行命令而不断变化。哪怕是强行设置了 window name 也不管用。经过一番搜索，&lt;a href=&quot;https://stackoverflow.com/questions/6041178/keep-the-windows-name-fixed-in-tmux#comment26641702_6041178&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;找到解决方案&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Skills" scheme="https://liam.page/categories/Computer-Skills/"/>
    
    
      <category term="Tmux" scheme="https://liam.page/tags/Tmux/"/>
    
  </entry>
  
</feed>
